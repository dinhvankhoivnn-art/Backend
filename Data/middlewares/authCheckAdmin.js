/**
 * Middleware ki·ªÉm tra quy·ªÅn admin
 * Ch·ªâ cho ph√©p user c√≥ role 'admin' truy c·∫≠p
 */

const User = require("../models/User");

/**
 * Middleware ki·ªÉm tra quy·ªÅn admin
 * @param {Object} req - Request object
 * @param {Object} res - Response object
 * @param {Function} next - Next middleware function
 */
const authCheckAdmin = (req, res, next) => {
  try {
    // Ki·ªÉm tra user ƒë√£ ƒë∆∞·ª£c x√°c th·ª±c ch∆∞a
    if (!req.user) {
      return res.status(401).json({
        success: false,
        message: "Ch∆∞a x√°c th·ª±c ng∆∞·ªùi d√πng",
      });
    }

    // Ki·ªÉm tra role admin
    if (req.user.role !== "admin") {
      return res.status(403).json({
        success: false,
        message: "Kh√¥ng c√≥ quy·ªÅn truy c·∫≠p. Ch·ªâ admin m·ªõi ƒë∆∞·ª£c ph√©p.",
        requiredRole: "admin",
        currentRole: req.user.role,
      });
    }

    // Log ho·∫°t ƒë·ªông admin
    if (process.env.NODE_ENV === "development") {
      console.log(`üëë Admin access granted for: ${req.user.email}`);
    }

    next();
  } catch (error) {
    console.error("‚ùå L·ªói ki·ªÉm tra quy·ªÅn admin:", error.message);

    return res.status(500).json({
      success: false,
      message: "L·ªói server khi ki·ªÉm tra quy·ªÅn admin",
    });
  }
};

/**
 * Middleware ki·ªÉm tra quy·ªÅn admin ho·∫∑c owner
 * Cho ph√©p admin ho·∫∑c ch·ªß s·ªü h·ªØu c·ªßa resource truy c·∫≠p
 * @param {Function} getResourceOwner - Function ƒë·ªÉ l·∫•y ID ch·ªß s·ªü h·ªØu
 */
const authCheckAdminOrOwner = (getResourceOwner) => {
  return async (req, res, next) => {
    try {
      // Ki·ªÉm tra user ƒë√£ ƒë∆∞·ª£c x√°c th·ª±c ch∆∞a
      if (!req.user) {
        return res.status(401).json({
          success: false,
          message: "Ch∆∞a x√°c th·ª±c ng∆∞·ªùi d√πng",
        });
      }

      // Admin lu√¥n ƒë∆∞·ª£c ph√©p
      if (req.user.role === "admin") {
        if (process.env.NODE_ENV === "development") {
          console.log(`üëë Admin access granted for: ${req.user.email}`);
        }
        return next();
      }

      // Ki·ªÉm tra quy·ªÅn owner
      const resourceOwnerId = await getResourceOwner(req);
      if (req.user.id.toString() === resourceOwnerId.toString()) {
        if (process.env.NODE_ENV === "development") {
          console.log(`üë§ Owner access granted for: ${req.user.email}`);
        }
        return next();
      }

      // Kh√¥ng c√≥ quy·ªÅn
      return res.status(403).json({
        success: false,
        message:
          "Kh√¥ng c√≥ quy·ªÅn truy c·∫≠p. Ch·ªâ admin ho·∫∑c ch·ªß s·ªü h·ªØu m·ªõi ƒë∆∞·ª£c ph√©p.",
        requiredRole: "admin or owner",
        currentRole: req.user.role,
      });
    } catch (error) {
      console.error("‚ùå L·ªói ki·ªÉm tra quy·ªÅn admin/owner:", error.message);

      return res.status(500).json({
        success: false,
        message: "L·ªói server khi ki·ªÉm tra quy·ªÅn truy c·∫≠p",
      });
    }
  };
};

/**
 * Middleware ki·ªÉm tra quy·ªÅn admin v·ªõi audit log
 * Ghi log khi admin truy c·∫≠p t√†i nguy√™n nh·∫°y c·∫£m
 */
const authCheckAdminWithAudit = (resource = "unknown") => {
  return (req, res, next) => {
    try {
      // Ki·ªÉm tra user ƒë√£ ƒë∆∞·ª£c x√°c th·ª±c ch∆∞a
      if (!req.user) {
        return res.status(401).json({
          success: false,
          message: "Ch∆∞a x√°c th·ª±c ng∆∞·ªùi d√πng",
        });
      }

      // Ki·ªÉm tra role admin
      if (req.user.role !== "admin") {
        // Log –ø–æ–ø—ã—Ç–∫—É truy c·∫≠p kh√¥ng ƒë∆∞·ª£c ph√©p
        console.warn(`üö´ Unauthorized admin access attempt to ${resource}:`, {
          userId: req.user.id,
          email: req.user.email,
          role: req.user.role,
          ip: req.ip || req.connection.remoteAddress,
          userAgent: req.get("User-Agent"),
          timestamp: new Date().toISOString(),
        });

        return res.status(403).json({
          success: false,
          message: "Kh√¥ng c√≥ quy·ªÅn truy c·∫≠p. Ch·ªâ admin m·ªõi ƒë∆∞·ª£c ph√©p.",
          requiredRole: "admin",
          currentRole: req.user.role,
        });
      }

      // Log truy c·∫≠p admin th√†nh c√¥ng
      console.log(`‚úÖ Admin access to ${resource}:`, {
        adminId: req.user.id,
        adminEmail: req.user.email,
        ip: req.ip || req.connection.remoteAddress,
        timestamp: new Date().toISOString(),
      });

      next();
    } catch (error) {
      console.error("‚ùå L·ªói ki·ªÉm tra quy·ªÅn admin v·ªõi audit:", error.message);

      return res.status(500).json({
        success: false,
        message: "L·ªói server khi ki·ªÉm tra quy·ªÅn admin",
      });
    }
  };
};

module.exports = {
  authCheckAdmin,
  authCheckAdminOrOwner,
  authCheckAdminWithAudit,
};
