/**
 * Middleware x√°c th·ª±c JWT token
 * Ki·ªÉm tra token trong cookie v√† x√°c minh t√≠nh h·ª£p l·ªá
 */

const { verifyToken } = require("../utils/auth");
const User = require("../models/User");

/**
 * Middleware x√°c th·ª±c JWT token t·ª´ cookie
 * @param {Object} req - Request object
 * @param {Object} res - Response object
 * @param {Function} next - Next middleware function
 */
const authVerifyToken = async (req, res, next) => {
  try {
    // L·∫•y token t·ª´ cookie
    const token =
      req.cookies?.token || req.headers.authorization?.replace("Bearer ", "");

    if (!token) {
      return res.status(401).json({
        success: false,
        message: "Kh√¥ng t√¨m th·∫•y token x√°c th·ª±c",
      });
    }

    // X√°c minh token
    const decoded = verifyToken(token);
    if (!decoded) {
      // X√≥a cookie kh√¥ng h·ª£p l·ªá
      res.clearCookie("token");
      return res.status(401).json({
        success: false,
        message: "Token kh√¥ng h·ª£p l·ªá ho·∫∑c ƒë√£ h·∫øt h·∫°n",
      });
    }

    // Ki·ªÉm tra user c√≥ t·ªìn t·∫°i kh√¥ng
    const user = await User.findById(decoded.id).select("+pass");
    if (!user) {
      // X√≥a cookie n·∫øu user kh√¥ng t·ªìn t·∫°i
      res.clearCookie("token");
      return res.status(401).json({
        success: false,
        message: "Ng∆∞·ªùi d√πng kh√¥ng t·ªìn t·∫°i",
      });
    }

    // Th√™m th√¥ng tin user v√†o request
    req.user = {
      id: user._id,
      email: user.email,
      role: user.role,
      name: user.name,
      age: user.age,
    };

    // Log ho·∫°t ƒë·ªông (c√≥ th·ªÉ t·∫Øt trong production)
    if (process.env.NODE_ENV === "development") {
      console.log(`üîê Token verified for user: ${user.email} (${user.role})`);
    }

    next();
  } catch (error) {
    console.error("‚ùå L·ªói x√°c th·ª±c token:", error.message);

    // X√≥a cookie trong tr∆∞·ªùng h·ª£p l·ªói
    res.clearCookie("token");

    return res.status(500).json({
      success: false,
      message: "L·ªói server khi x√°c th·ª±c token",
    });
  }
};

/**
 * Middleware x√°c th·ª±c JWT token (kh√¥ng b·∫Øt bu·ªôc)
 * Cho ph√©p request ti·∫øp t·ª•c ngay c·∫£ khi kh√¥ng c√≥ token
 */
const authVerifyTokenOptional = async (req, res, next) => {
  try {
    const token =
      req.cookies?.token || req.headers.authorization?.replace("Bearer ", "");

    if (token) {
      const decoded = verifyToken(token);
      if (decoded) {
        const user = await User.findById(decoded.id);
        if (user) {
          req.user = {
            id: user._id,
            email: user.email,
            role: user.role,
            name: user.name,
            age: user.age,
          };
        }
      }
    }

    next();
  } catch (error) {
    // Kh√¥ng l√†m gi√°n ƒëo·∫°n request n·∫øu c√≥ l·ªói
    console.error("‚ö†Ô∏è L·ªói x√°c th·ª±c token t√πy ch·ªçn:", error.message);
    next();
  }
};

module.exports = {
  authVerifyToken,
  authVerifyTokenOptional,
};
