/**
 * Middleware rate limiting t·ªïng h·ª£p cho to√†n b·ªô ·ª©ng d·ª•ng
 * B·∫£o v·ªá kh·ªèi DDoS attacks v√† abuse
 */

const rateLimit = require("express-rate-limit");

/**
 * Rate limiter t·ªïng qu√°t cho t·∫•t c·∫£ requests
 * Gi·ªõi h·∫°n 1000 request m·ªói 15 ph√∫t t·ª´ c√πng IP
 */
const securityGeneralLimiter = rateLimit({
  windowMs: 15 * 60 * 1000, // 15 ph√∫t
  max: 1000, // Gi·ªõi h·∫°n 1000 request
  message: {
    success: false,
    message: "Qu√° nhi·ªÅu request. Vui l√≤ng th·ª≠ l·∫°i sau.",
    retryAfter: "15 ph√∫t",
  },
  standardHeaders: true,
  legacyHeaders: false,
  skip: (req) => {
    // B·ªè qua rate limit cho admin ƒë√£ x√°c th·ª±c
    return req.user && req.user.role === "admin";
  },
  handler: (req, res) => {
    console.error(`üö® General rate limit exceeded:`, {
      ip: req.ip,
      userAgent: req.get("User-Agent"),
      userId: req.user?.id,
      endpoint: req.originalUrl,
      method: req.method,
      timestamp: new Date().toISOString(),
    });
  },
});

/**
 * Rate limiter nghi√™m ng·∫∑t cho endpoints nh·∫°y c·∫£m
 * Gi·ªõi h·∫°n 10 request m·ªói ph√∫t
 */
const securitySensitiveLimiter = rateLimit({
  windowMs: 60 * 1000, // 1 ph√∫t
  max: 10,
  message: {
    success: false,
    message: "Qu√° nhi·ªÅu request ƒë·∫øn endpoint nh·∫°y c·∫£m.",
    retryAfter: "1 ph√∫t",
  },
  standardHeaders: true,
  legacyHeaders: false,
  keyGenerator: (req) => {
    // S·ª≠ d·ª•ng user ID n·∫øu ƒë√£ ƒëƒÉng nh·∫≠p, n·∫øu kh√¥ng th√¨ IP
    return req.user?.id || req.ip;
  },
  handler: (req, res) => {
    console.error(`üö® Sensitive endpoint rate limit exceeded:`, {
      ip: req.ip,
      userId: req.user?.id,
      endpoint: req.originalUrl,
      method: req.method,
      timestamp: new Date().toISOString(),
    });
  },
});

/**
 * Rate limiter cho uploads
 * Gi·ªõi h·∫°n 20 uploads m·ªói gi·ªù
 */
const securityUploadLimiter = rateLimit({
  windowMs: 60 * 60 * 1000, // 1 gi·ªù
  max: 20,
  message: {
    success: false,
    message: "Qu√° nhi·ªÅu file upload. Vui l√≤ng th·ª≠ l·∫°i sau 1 gi·ªù.",
    retryAfter: "1 gi·ªù",
  },
  standardHeaders: true,
  legacyHeaders: false,
  skip: (req) => {
    return req.user && req.user.role === "admin";
  },
  handler: (req, res) => {
    console.error(`üö® Upload rate limit exceeded:`, {
      ip: req.ip,
      userId: req.user?.id,
      timestamp: new Date().toISOString(),
    });
  },
});

/**
 * Rate limiter cho API endpoints
 * Gi·ªõi h·∫°n 500 request m·ªói 5 ph√∫t cho APIs
 */
const securityApiLimiter = rateLimit({
  windowMs: 5 * 60 * 1000, // 5 ph√∫t
  max: 500,
  message: {
    success: false,
    message: "API rate limit exceeded.",
    retryAfter: "5 ph√∫t",
  },
  standardHeaders: true,
  legacyHeaders: false,
  skip: (req) => {
    return req.user && req.user.role === "admin";
  },
  handler: (req, res) => {
    console.error(`üö® API rate limit exceeded:`, {
      ip: req.ip,
      userId: req.user?.id,
      endpoint: req.originalUrl,
      timestamp: new Date().toISOString(),
    });
  },
});

/**
 * Rate limiter cho static files (CSS, JS, images)
 * Gi·ªõi h·∫°n 1000 request m·ªói ph√∫t cho static files
 */
const securityStaticLimiter = rateLimit({
  windowMs: 60 * 1000, // 1 ph√∫t
  max: 1000,
  message: {
    success: false,
    message: "Static files rate limit exceeded.",
  },
  standardHeaders: true,
  legacyHeaders: false,
  handler: (req, res) => {
    console.warn(`‚ö†Ô∏è Static files rate limit exceeded:`, {
      ip: req.ip,
      endpoint: req.originalUrl,
      timestamp: new Date().toISOString(),
    });
  },
});

/**
 * Rate limiter ch·ªëng brute force password reset
 * Gi·ªõi h·∫°n 5 request m·ªói 30 ph√∫t
 */
const securityPasswordResetLimiter = rateLimit({
  windowMs: 30 * 60 * 1000, // 30 ph√∫t
  max: 5,
  message: {
    success: false,
    message: "Qu√° nhi·ªÅu y√™u c·∫ßu reset m·∫≠t kh·∫©u.",
    retryAfter: "30 ph√∫t",
  },
  standardHeaders: true,
  legacyHeaders: false,
  keyGenerator: (req) => {
    // S·ª≠ d·ª•ng email ho·∫∑c IP
    return req.body?.email || req.ip;
  },
  handler: (req, res) => {
    console.error(`üö® Password reset brute force detected:`, {
      ip: req.ip,
      email: req.body?.email,
      timestamp: new Date().toISOString(),
    });
  },
});

/**
 * Rate limiter ch·ªëng DDoS
 * Gi·ªõi h·∫°n 100 request m·ªói 10 gi√¢y cho m·ªói IP
 */
const securityDdosLimiter = rateLimit({
  windowMs: 10 * 1000, // 10 gi√¢y
  max: 100,
  message: {
    success: false,
    message: "Request rate too high. Possible DDoS attack detected.",
  },
  standardHeaders: true,
  legacyHeaders: false,
  handler: (req, res) => {
    console.error(`üö® Potential DDoS attack:`, {
      ip: req.ip,
      userAgent: req.get("User-Agent"),
      endpoint: req.originalUrl,
      method: req.method,
      timestamp: new Date().toISOString(),
    });

    // C√≥ th·ªÉ th√™m logic ch·∫∑n IP ho·∫∑c th√¥ng b√°o admin
  },
});

/**
 * Middleware ki·ªÉm tra v√† ch·∫∑n suspicious traffic patterns
 * Ph√°t hi·ªán bot v√† automated requests
 * @param {Object} req - Request object
 * @param {Object} res - Response object
 * @param {Function} next - Next middleware function
 */
const securityTrafficAnalyzer = (req, res, next) => {
  try {
    const userAgent = req.get("User-Agent") || "";
    const ip = req.ip || req.connection.remoteAddress;
    const referer = req.get("Referer") || "";

    // Danh s√°ch patterns ƒë√°ng ng·ªù
    const suspiciousPatterns = [
      /\b(bot|crawler|spider|scraper)\b/i,
      /\bpython|java|curl|wget\b/i,
      /\bHTTrack|clshttp|archiver\b/i,
      /\bemail|harvest|extract|harvest\b/i,
      /\bmeta|data|mining|collection\b/i,
    ];

    // Ki·ªÉm tra User-Agent
    const isSuspiciousUA = suspiciousPatterns.some((pattern) =>
      pattern.test(userAgent)
    );

    // Ki·ªÉm tra request patterns (c√≥ th·ªÉ m·ªü r·ªông)
    const isSuspiciousReferer =
      referer.includes("localhost") && !req.originalUrl.includes("/api/");

    if (isSuspiciousUA || isSuspiciousReferer) {
      console.warn(`üö® Suspicious traffic detected:`, {
        ip: ip,
        userAgent: userAgent.substring(0, 100),
        referer: referer,
        endpoint: req.originalUrl,
        method: req.method,
        timestamp: new Date().toISOString(),
      });

      // C√≥ th·ªÉ ch·∫∑n request ho·∫∑c ch·ªâ log
      // return res.status(429).json({
      //   success: false,
      //   message: 'Traffic pattern not allowed'
      // });
    }

    next();
  } catch (error) {
    console.error("‚ùå L·ªói traffic analyzer:", error.message);
    next();
  }
};

/**
 * Middleware theo d√µi v√† log rate limit violations
 * @param {Object} req - Request object
 * @param {Object} res - Response object
 * @param {Function} next - Next middleware function
 */
const securityRateLimitLogger = (req, res, next) => {
  // Ghi log t·∫•t c·∫£ request v·ªõi th√¥ng tin rate limit
  const rateLimitInfo = {
    ip: req.ip,
    userId: req.user?.id,
    endpoint: req.originalUrl,
    method: req.method,
    userAgent: req.get("User-Agent"),
    remaining: res.get("X-RateLimit-Remaining"),
    reset: res.get("X-RateLimit-Reset"),
    timestamp: new Date().toISOString(),
  };

  // Log chi ti·∫øt trong development ho·∫∑c khi c√≥ v·∫•n ƒë·ªÅ
  if (
    process.env.NODE_ENV === "development" ||
    (rateLimitInfo.remaining && parseInt(rateLimitInfo.remaining) < 10)
  ) {
    console.log(`üìä Rate limit status:`, rateLimitInfo);
  }

  next();
};

/**
 * Middleware t·ªïng h·ª£p security rate limiting
 * √Åp d·ª•ng nhi·ªÅu l·ªõp rate limiting kh√°c nhau
 */
const securityRateLimit = [
  securityDdosLimiter, // DDoS protection (10s/100req)
  securityGeneralLimiter, // General limit (15min/1000req)
  securityTrafficAnalyzer, // Traffic analysis
  securityRateLimitLogger, // Rate limit logging
];

module.exports = {
  securityGeneralLimiter,
  securitySensitiveLimiter,
  securityUploadLimiter,
  securityApiLimiter,
  securityStaticLimiter,
  securityPasswordResetLimiter,
  securityDdosLimiter,
  securityTrafficAnalyzer,
  securityRateLimitLogger,
  securityRateLimit,
};
