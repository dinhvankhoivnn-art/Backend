/**
 * Middleware c·∫•u h√¨nh CORS (Cross-Origin Resource Sharing)
 * Ki·ªÉm so√°t truy c·∫≠p t·ª´ c√°c domain kh√°c
 */

const cors = require("cors");

/**
 * C·∫•u h√¨nh CORS c∆° b·∫£n cho production
 */
const securityCors = cors({
  origin: function (origin, callback) {
    // L·∫•y danh s√°ch domain ƒë∆∞·ª£c ph√©p t·ª´ env
    const allowedOrigins = process.env.ALLOWED_ORIGINS?.split(",") || [
      "http://localhost:3000",
    ];

    // Cho ph√©p requests kh√¥ng c√≥ origin (nh∆∞ mobile apps, Postman)
    if (!origin) return callback(null, true);

    // Ki·ªÉm tra origin c√≥ trong danh s√°ch cho ph√©p kh√¥ng
    if (allowedOrigins.includes(origin)) {
      return callback(null, true);
    }

    // T·ª´ ch·ªëi origin kh√¥ng ƒë∆∞·ª£c ph√©p
    const msg = `Origin ${origin} kh√¥ng ƒë∆∞·ª£c ph√©p truy c·∫≠p`;
    console.warn(`üö´ CORS blocked: ${msg}`, {
      origin: origin,
      timestamp: new Date().toISOString(),
    });

    return callback(new Error(msg), false);
  },

  // C√°c methods HTTP ƒë∆∞·ª£c ph√©p
  methods: ["GET", "POST", "PUT", "DELETE", "PATCH", "OPTIONS"],

  // Headers ƒë∆∞·ª£c ph√©p g·ª≠i
  allowedHeaders: [
    "Content-Type",
    "Authorization",
    "X-Requested-With",
    "Accept",
    "Origin",
    "Access-Control-Request-Method",
    "Access-Control-Request-Headers",
  ],

  // Headers ƒë∆∞·ª£c ph√©p expose cho client
  exposedHeaders: [
    "X-API-Version",
    "X-Request-ID",
    "X-Rate-Limit-Remaining",
    "X-Rate-Limit-Reset",
  ],

  // Cho ph√©p g·ª≠i credentials (cookies, authorization headers)
  credentials: true,

  // Cache preflight request trong 1 ng√†y
  maxAge: 86400,

  // G·ª≠i OPTIONS request cho t·∫•t c·∫£ routes
  preflightContinue: false,

  // X·ª≠ l√Ω OPTIONS requests
  optionsSuccessStatus: 204,
});

/**
 * C·∫•u h√¨nh CORS cho development - permissive h∆°n
 */
const securityCorsDev = cors({
  origin: true, // Cho ph√©p t·∫•t c·∫£ origins trong development
  credentials: true,
  methods: ["GET", "POST", "PUT", "DELETE", "PATCH", "OPTIONS"],
  allowedHeaders: ["Content-Type", "Authorization", "X-Requested-With"],
  exposedHeaders: ["X-API-Version", "X-Request-ID"],
});

/**
 * Middleware t√πy ch·ªânh ki·ªÉm tra v√† log CORS requests
 * @param {Object} req - Request object
 * @param {Object} res - Response object
 * @param {Function} next - Next middleware function
 */
const corsLogger = (req, res, next) => {
  // Log CORS requests trong development
  if (process.env.NODE_ENV === "development") {
    const origin = req.get("Origin");
    const method = req.method;
    const userAgent = req.get("User-Agent");

    if (origin) {
      console.log(`üåê CORS request: ${method} ${req.originalUrl}`, {
        origin: origin,
        userAgent: userAgent?.substring(0, 50),
        ip: req.ip,
      });
    }
  }

  next();
};

/**
 * Middleware ki·ªÉm tra suspicious CORS requests
 * Ph√°t hi·ªán v√† ch·∫∑n c√°c requests ƒë√°ng ng·ªù
 * @param {Object} req - Request object
 * @param {Object} res - Response object
 * @param {Function} next - Next middleware function
 */
const corsSecurityCheck = (req, res, next) => {
  try {
    const origin = req.get("Origin");
    const referer = req.get("Referer");
    const host = req.get("Host");
    const userAgent = req.get("User-Agent");

    // Danh s√°ch User-Agent ƒë√°ng ng·ªù
    const suspiciousUserAgents = [
      "curl",
      "wget",
      "python",
      "java",
      "bot",
      "spider",
      "crawler",
    ];

    // Ki·ªÉm tra User-Agent
    const isSuspiciousUA = suspiciousUserAgents.some((agent) =>
      userAgent?.toLowerCase().includes(agent.toLowerCase())
    );

    if (isSuspiciousUA) {
      console.warn(`üö® Suspicious CORS request detected:`, {
        origin: origin,
        referer: referer,
        host: host,
        userAgent: userAgent,
        ip: req.ip,
        method: req.method,
        url: req.originalUrl,
        timestamp: new Date().toISOString(),
      });

      // C√≥ th·ªÉ ch·∫∑n request ho·∫∑c ch·ªâ log
      // return res.status(403).json({
      //   success: false,
      //   message: 'Request blocked due to suspicious activity'
      // });
    }

    // Ki·ªÉm tra Origin v√† Referer mismatch
    if (origin && referer && !referer.startsWith(origin)) {
      console.warn(`‚ö†Ô∏è Origin-Referer mismatch:`, {
        origin: origin,
        referer: referer,
        ip: req.ip,
      });
    }

    next();
  } catch (error) {
    console.error("‚ùå L·ªói CORS security check:", error.message);
    next();
  }
};

/**
 * Middleware t√πy ch·ªânh cho API routes
 * √Åp d·ª•ng CORS nghi√™m ng·∫∑t h∆°n cho API endpoints
 */
const corsApiStrict = cors({
  origin: function (origin, callback) {
    const allowedOrigins = process.env.ALLOWED_ORIGINS?.split(",") || [
      "http://localhost:3000",
    ];

    // API ch·ªâ cho ph√©p origins ƒë∆∞·ª£c c·∫•u h√¨nh
    if (!origin)
      return callback(new Error("Origin header required for API"), false);

    if (allowedOrigins.includes(origin)) {
      return callback(null, true);
    }

    return callback(
      new Error(`API access denied for origin: ${origin}`),
      false
    );
  },

  credentials: true,
  methods: ["GET", "POST", "PUT", "DELETE", "PATCH"],
  allowedHeaders: ["Content-Type", "Authorization"],
  exposedHeaders: ["X-API-Version", "X-Request-ID"],
  maxAge: 86400,
});

/**
 * Middleware cho WebSocket CORS (n·∫øu s·ª≠ d·ª•ng WS)
 */
const corsWebSocket = cors({
  origin: function (origin, callback) {
    const allowedOrigins = process.env.ALLOWED_ORIGINS?.split(",") || [
      "http://localhost:3000",
    ];

    if (!origin) return callback(null, true);

    if (allowedOrigins.includes(origin)) {
      return callback(null, true);
    }

    return callback(new Error("WebSocket CORS denied"), false);
  },

  credentials: true,
  methods: ["GET", "POST"],
  allowedHeaders: ["Content-Type", "Authorization", "Upgrade", "Connection"],
  exposedHeaders: ["X-WebSocket-Version"],
});

module.exports = {
  securityCors,
  securityCorsDev,
  corsLogger,
  corsSecurityCheck,
  corsApiStrict,
  corsWebSocket,
};
