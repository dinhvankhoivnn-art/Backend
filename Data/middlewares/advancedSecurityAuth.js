/**
 * Middleware x√°c th·ª±c b·∫£o m·∫≠t cao c·∫•p v·ªõi 2FA, OTP v√† m√£ d·ª± ph√≤ng
 * H·ªá th·ªëng x√°c th·ª±c ƒëa l·ªõp v·ªõi b·∫£o m·∫≠t t·ªëi ∆∞u
 */

const crypto = require("crypto");
const User = require("../models/User");
const { generateOTP, sendEmailOTP } = require("../utils/otpService");
const { generateSecureKey } = require("../utils/faceEncryption");

// ============================================================================
// C·∫§U H√åNH B·∫¢O M·∫¨T N√ÇNG CAO
// ============================================================================

const SECURITY_CONFIG = {
  // Th·ªùi gian h·∫øt h·∫°n OTP (15 ph√∫t)
  OTP_EXPIRY: 15 * 60 * 1000,

  // Th·ªùi gian h·∫øt h·∫°n m√£ d·ª± ph√≤ng (15 ph√∫t)
  BACKUP_CODE_EXPIRY: 15 * 60 * 1000,

  // S·ªë l·∫ßn th·ª≠ OTP t·ªëi ƒëa
  MAX_OTP_ATTEMPTS: 3,

  // Th·ªùi gian kh√≥a t√†i kho·∫£n sau nhi·ªÅu l·∫ßn th·ª≠ sai
  LOCKOUT_DURATION: 30 * 60 * 1000, // 30 ph√∫t

  // ƒê·ªô d√†i m√£ d·ª± ph√≤ng
  BACKUP_CODE_LENGTH: 10,

  // S·ªë l∆∞·ª£ng m√£ d·ª± ph√≤ng
  BACKUP_CODES_COUNT: 10,

  // Th·ªùi gian ch·ªù gi·ªØa c√°c l·∫ßn g·ª≠i OTP
  OTP_COOLDOWN: 60 * 1000, // 1 ph√∫t
};

// ============================================================================
// L·ªöP QU·∫¢N L√ù X√ÅC TH·ª∞C ƒêA L·ªöP
// ============================================================================

class MultiFactorAuthManager {
  constructor() {
    this.otpStore = new Map(); // L∆∞u tr·ªØ OTP t·∫°m th·ªùi
    this.backupCodeStore = new Map(); // L∆∞u tr·ªØ m√£ d·ª± ph√≤ng
    this.failedAttempts = new Map(); // Theo d√µi l·∫ßn th·ª≠ th·∫•t b·∫°i
    this.lockoutStore = new Map(); // Theo d√µi t√†i kho·∫£n b·ªã kh√≥a
    this.otpCooldown = new Map(); // Theo d√µi th·ªùi gian ch·ªù g·ª≠i OTP

    // Kh·ªüi t·∫°o cleanup t·ª± ƒë·ªông
    this.initializeCleanup();
  }

  /**
   * Kh·ªüi t·∫°o h·ªá th·ªëng cleanup t·ª± ƒë·ªông
   */
  initializeCleanup() {
    // Cleanup m·ªói 5 ph√∫t
    setInterval(() => {
      this.cleanupExpiredData();
    }, 5 * 60 * 1000);
  }

  /**
   * Cleanup d·ªØ li·ªáu h·∫øt h·∫°n
   */
  cleanupExpiredData() {
    const now = Date.now();

    // Cleanup OTP h·∫øt h·∫°n
    for (const [key, data] of this.otpStore.entries()) {
      if (data.expiresAt < now) {
        this.otpStore.delete(key);
      }
    }

    // Cleanup m√£ d·ª± ph√≤ng h·∫øt h·∫°n
    for (const [key, data] of this.backupCodeStore.entries()) {
      if (data.expiresAt < now) {
        this.backupCodeStore.delete(key);
      }
    }

    // Cleanup th√¥ng tin kh√≥a t√†i kho·∫£n h·∫øt h·∫°n
    for (const [key, lockoutTime] of this.lockoutStore.entries()) {
      if (lockoutTime < now) {
        this.lockoutStore.delete(key);
      }
    }

    // Cleanup th√¥ng tin cooldown h·∫øt h·∫°n
    for (const [key, cooldownTime] of this.otpCooldown.entries()) {
      if (cooldownTime < now) {
        this.otpCooldown.delete(key);
      }
    }
  }

  /**
   * T·∫°o v√† g·ª≠i OTP qua email
   */
  async generateAndSendOTP(user, req) {
    try {
      // Ki·ªÉm tra t√†i kho·∫£n c√≥ b·ªã kh√≥a kh√¥ng
      if (this.isAccountLocked(user._id)) {
        throw new Error("T√†i kho·∫£n ƒë√£ b·ªã kh√≥a t·∫°m th·ªùi do nhi·ªÅu l·∫ßn th·ª≠ sai");
      }

      // Ki·ªÉm tra th·ªùi gian ch·ªù g·ª≠i OTP
      if (this.isInOTPCooldown(user._id)) {
        const remainingTime = this.getRemainingCooldownTime(user._id);
        throw new Error(
          `Vui l√≤ng ch·ªù ${Math.ceil(
            remainingTime / 1000
          )} gi√¢y tr∆∞·ªõc khi g·ª≠i OTP m·ªõi`
        );
      }

      // T·∫°o OTP ƒë·∫∑c bi·ªát v·ªõi ƒë·ªô b·∫£o m·∫≠t cao
      const otpData = this.generateSecureOTP(user, req);

      // L∆∞u tr·ªØ OTP
      this.storeOTP(user._id, otpData);

      // G·ª≠i OTP qua email
      await this.sendOTPEmail(user, otpData.otp, req);

      // ƒê·∫∑t th·ªùi gian ch·ªù cho l·∫ßn g·ª≠i ti·∫øp theo
      this.setOTPCooldown(user._id);

      return {
        success: true,
        message: "OTP ƒë√£ ƒë∆∞·ª£c g·ª≠i ƒë·∫øn email c·ªßa b·∫°n",
        otpId: otpData.id,
        expiresIn: SECURITY_CONFIG.OTP_EXPIRY / 1000,
      };
    } catch (error) {
      throw new Error(`L·ªói g·ª≠i OTP: ${error.message}`);
    }
  }

  /**
   * T·∫°o OTP b·∫£o m·∫≠t cao
   */
  generateSecureOTP(user, req) {
    // T·∫°o OTP 8 ch·ªØ s·ªë v·ªõi ƒë·ªô b·∫£o m·∫≠t cao
    const otp = this.generateNumericOTP(8);

    // T·∫°o ID duy nh·∫•t cho OTP n√†y
    const otpId = crypto.randomBytes(16).toString("hex");

    // T·∫°o key m√£ h√≥a ƒë·∫∑c bi·ªát
    const encryptionKey = generateSecureKey(user._id, req.sessionID, "otp");

    // M√£ h√≥a OTP
    const encryptedOTP = this.encryptOTP(otp, encryptionKey);

    // Th·ªùi gian h·∫øt h·∫°n
    const expiresAt = Date.now() + SECURITY_CONFIG.OTP_EXPIRY;

    return {
      id: otpId,
      otp: otp,
      encryptedOTP: encryptedOTP,
      key: encryptionKey,
      expiresAt: expiresAt,
      attempts: 0,
      createdAt: Date.now(),
      userAgent: req.get("User-Agent"),
      ipAddress: req.ip,
      sessionId: req.sessionID,
    };
  }

  /**
   * T·∫°o OTP s·ªë v·ªõi ƒë·ªô b·∫£o m·∫≠t cao
   */
  generateNumericOTP(length) {
    const digits = "0123456789";
    let otp = "";

    // ƒê·∫£m b·∫£o OTP kh√¥ng b·∫Øt ƒë·∫ßu b·∫±ng 0
    otp += digits.charAt(Math.floor(Math.random() * 9) + 1);

    // T·∫°o c√°c ch·ªØ s·ªë c√≤n l·∫°i
    for (let i = 1; i < length; i++) {
      otp += digits.charAt(Math.floor(Math.random() * digits.length));
    }

    return otp;
  }

  /**
   * M√£ h√≥a OTP ƒë·∫∑c bi·ªát
   */
  encryptOTP(otp, key) {
    const algorithm = "aes-256-gcm";
    const iv = crypto.randomBytes(16);
    const cipher = crypto.createCipher(algorithm, key.substring(0, 32));

    const encrypted = Buffer.concat([
      cipher.update(otp, "utf8"),
      cipher.final(),
    ]);

    const authTag = cipher.getAuthTag();

    return {
      encrypted: encrypted.toString("base64"),
      iv: iv.toString("base64"),
      authTag: authTag.toString("base64"),
    };
  }

  /**
   * Gi·∫£i m√£ OTP
   */
  decryptOTP(encryptedOTP, key) {
    try {
      const algorithm = "aes-256-gcm";
      const decipher = crypto.createDecipher(algorithm, key.substring(0, 32));

      decipher.setAuthTag(Buffer.from(encryptedOTP.authTag, "base64"));

      const decrypted = Buffer.concat([
        decipher.update(Buffer.from(encryptedOTP.encrypted, "base64")),
        decipher.final(),
      ]);

      return decrypted.toString("utf8");
    } catch (error) {
      throw new Error("Kh√¥ng th·ªÉ gi·∫£i m√£ OTP");
    }
  }

  /**
   * L∆∞u tr·ªØ OTP b·∫£o m·∫≠t
   */
  storeOTP(userId, otpData) {
    const key = `${userId}:${otpData.id}`;
    this.otpStore.set(key, otpData);
  }

  /**
   * X√°c minh OTP
   */
  async verifyOTP(userId, otpId, providedOTP, req) {
    try {
      const key = `${userId}:${otpId}`;
      const otpData = this.otpStore.get(key);

      // Ki·ªÉm tra OTP c√≥ t·ªìn t·∫°i kh√¥ng
      if (!otpData) {
        throw new Error("OTP kh√¥ng h·ª£p l·ªá ho·∫∑c ƒë√£ h·∫øt h·∫°n");
      }

      // Ki·ªÉm tra th·ªùi h·∫°n OTP
      if (otpData.expiresAt < Date.now()) {
        this.otpStore.delete(key);
        throw new Error("OTP ƒë√£ h·∫øt h·∫°n");
      }

      // Ki·ªÉm tra s·ªë l·∫ßn th·ª≠
      if (otpData.attempts >= SECURITY_CONFIG.MAX_OTP_ATTEMPTS) {
        this.otpStore.delete(key);
        this.recordFailedAttempt(userId);
        throw new Error("ƒê√£ v∆∞·ª£t qu√° s·ªë l·∫ßn th·ª≠ OTP cho ph√©p");
      }

      // Ki·ªÉm tra th√¥ng tin request
      if (!this.validateOTPRequest(otpData, req)) {
        otpData.attempts++;
        throw new Error("Th√¥ng tin x√°c th·ª±c kh√¥ng kh·ªõp");
      }

      // Gi·∫£i m√£ v√† ki·ªÉm tra OTP
      const decryptedOTP = this.decryptOTP(otpData.encryptedOTP, otpData.key);

      if (decryptedOTP !== providedOTP) {
        otpData.attempts++;
        this.recordFailedAttempt(userId);
        throw new Error("OTP kh√¥ng ch√≠nh x√°c");
      }

      // OTP ch√≠nh x√°c - x√≥a kh·ªèi store v√† tr·∫£ v·ªÅ th√†nh c√¥ng
      this.otpStore.delete(key);

      return {
        success: true,
        message: "X√°c th·ª±c OTP th√†nh c√¥ng",
        timestamp: Date.now(),
      };
    } catch (error) {
      throw new Error(`L·ªói x√°c minh OTP: ${error.message}`);
    }
  }

  /**
   * Validate th√¥ng tin request OTP
   */
  validateOTPRequest(otpData, req) {
    // Ki·ªÉm tra session ID
    if (otpData.sessionId !== req.sessionID) {
      return false;
    }

    // Ki·ªÉm tra IP address (cho ph√©p m·ªôt kho·∫£ng thay ƒë·ªïi nh·ªè)
    if (otpData.ipAddress !== req.ip) {
      // C√≥ th·ªÉ ki·ªÉm tra m·∫°ng con c√πng
      const otpIP = otpData.ipAddress.split(".").slice(0, 3).join(".");
      const reqIP = req.ip.split(".").slice(0, 3).join(".");
      if (otpIP !== reqIP) {
        return false;
      }
    }

    // Ki·ªÉm tra User-Agent (cho ph√©p thay ƒë·ªïi nh·ªè)
    if (otpData.userAgent !== req.get("User-Agent")) {
      // C√≥ th·ªÉ ki·ªÉm tra m·ªôt ph·∫ßn User-Agent
      const otpUA = otpData.userAgent.substring(0, 50);
      const reqUA = req.get("User-Agent").substring(0, 50);
      if (otpUA !== reqUA) {
        return false;
      }
    }

    return true;
  }

  /**
   * G·ª≠i OTP qua email
   */
  async sendOTPEmail(user, otp, req) {
    try {
      const emailData = {
        to: user.email,
        subject: "M√£ x√°c th·ª±c 2FA - H·ªá th·ªëng b·∫£o m·∫≠t cao c·∫•p",
        html: this.generateOTPEmailTemplate(user, otp, req),
        otp: otp,
        userId: user._id,
        ipAddress: req.ip,
        userAgent: req.get("User-Agent"),
      };

      await sendEmailOTP(emailData);

      // Log g·ª≠i OTP th√†nh c√¥ng
      console.log(`üìß OTP sent to ${user.email}:`, {
        userId: user._id,
        otpId: "HIDDEN",
        ipAddress: req.ip,
        timestamp: new Date(),
      });
    } catch (error) {
      console.error(`‚ùå Failed to send OTP to ${user.email}:`, error);
      throw new Error("Kh√¥ng th·ªÉ g·ª≠i OTP qua email");
    }
  }

  /**
   * T·∫°o template email OTP b·∫£o m·∫≠t
   */
  generateOTPEmailTemplate(user, otp, req) {
    return `
      <!DOCTYPE html>
      <html>
      <head>
        <meta charset="utf-8">
        <title>M√£ x√°c th·ª±c 2FA</title>
        <style>
          body { font-family: Arial, sans-serif; line-height: 1.6; color: #333; }
          .container { max-width: 600px; margin: 0 auto; padding: 20px; }
          .header { background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); color: white; padding: 30px; text-align: center; border-radius: 10px 10px 0 0; }
          .content { background: #f9f9f9; padding: 30px; border-radius: 0 0 10px 10px; }
          .otp-code { font-size: 32px; font-weight: bold; color: #667eea; text-align: center; margin: 30px 0; letter-spacing: 5px; }
          .security-info { background: #fff3cd; border: 1px solid #ffeaa7; padding: 15px; border-radius: 5px; margin: 20px 0; }
          .footer { text-align: center; margin-top: 30px; color: #666; font-size: 12px; }
          .warning { color: #dc3545; font-weight: bold; }
        </style>
      </head>
      <body>
        <div class="container">
          <div class="header">
            <h1>üîê X√°c th·ª±c 2FA</h1>
            <p>H·ªá th·ªëng b·∫£o m·∫≠t cao c·∫•p</p>
          </div>

          <div class="content">
            <h2>Xin ch√†o ${user.name},</h2>

            <p>B·∫°n ƒëang th·ª±c hi·ªán x√°c th·ª±c 2FA ƒë·ªÉ truy c·∫≠p v√†o h·ªá th·ªëng v·ªõi t√≠nh nƒÉng b·∫£o m·∫≠t cao.</p>

            <div class="otp-code">
              ${otp}
            </div>

            <div class="security-info">
              <h3>‚ö†Ô∏è Th√¥ng tin b·∫£o m·∫≠t:</h3>
              <p><strong>M√£ OTP n√†y s·∫Ω h·∫øt h·∫°n sau 15 ph√∫t</strong></p>
              <p><strong>Kh√¥ng chia s·∫ª m√£ n√†y v·ªõi b·∫•t k·ª≥ ai</strong></p>
              <p><strong>Th·ªùi gian: ${new Date().toLocaleString(
                "vi-VN"
              )}</strong></p>
              <p><strong>IP: ${req.ip}</strong></p>
            </div>

            <p>N·∫øu b·∫°n kh√¥ng th·ª±c hi·ªán y√™u c·∫ßu n√†y, vui l√≤ng:</p>
            <ol>
              <li>ƒê·ªïi m·∫≠t kh·∫©u ngay l·∫≠p t·ª©c</li>
              <li>Li√™n h·ªá v·ªõi b·ªô ph·∫≠n b·∫£o m·∫≠t</li>
              <li>Ki·ªÉm tra ho·∫°t ƒë·ªông t√†i kho·∫£n</li>
            </ol>

            <p class="warning">
              L∆∞u √Ω: H·ªá th·ªëng s·∫Ω kh√≥a t√†i kho·∫£n sau ${
                SECURITY_CONFIG.MAX_OTP_ATTEMPTS
              } l·∫ßn th·ª≠ sai li√™n ti·∫øp.
            </p>
          </div>

          <div class="footer">
            <p>¬© 2024 H·ªá th·ªëng b·∫£o m·∫≠t cao c·∫•p. T·∫•t c·∫£ quy·ªÅn ƒë∆∞·ª£c b·∫£o l∆∞u.</p>
            <p>Email n√†y ƒë∆∞·ª£c g·ª≠i t·ª± ƒë·ªông, vui l√≤ng kh√¥ng tr·∫£ l·ªùi.</p>
          </div>
        </div>
      </body>
      </html>
    `;
  }

  /**
   * T·∫°o m√£ d·ª± ph√≤ng ƒë·∫∑c bi·ªát
   */
  async generateBackupCodes(userId, sessionId) {
    try {
      const codes = [];
      const encryptedCodes = [];

      // T·∫°o key ƒë·∫∑c bi·ªát cho m√£ d·ª± ph√≤ng
      const backupKey = generateSecureKey(userId, sessionId, "backup-codes");

      for (let i = 0; i < SECURITY_CONFIG.BACKUP_CODES_COUNT; i++) {
        // T·∫°o m√£ d·ª± ph√≤ng 10 k√Ω t·ª±
        const code = this.generateBackupCode();

        // M√£ h√≥a m√£ d·ª± ph√≤ng
        const encryptedCode = this.encryptBackupCode(code, backupKey);

        codes.push(code);
        encryptedCodes.push(encryptedCode);
      }

      // L∆∞u tr·ªØ m√£ d·ª± ph√≤ng ƒë√£ m√£ h√≥a
      this.storeBackupCodes(userId, {
        codes: encryptedCodes,
        key: backupKey,
        createdAt: Date.now(),
        expiresAt: Date.now() + SECURITY_CONFIG.BACKUP_CODE_EXPIRY,
        usedCodes: [],
      });

      return {
        codes: codes,
        expiresAt: Date.now() + SECURITY_CONFIG.BACKUP_CODE_EXPIRY,
        instructions: [
          "L∆∞u tr·ªØ c√°c m√£ n√†y ·ªü n∆°i an to√†n",
          "M·ªói m√£ ch·ªâ s·ª≠ d·ª•ng ƒë∆∞·ª£c m·ªôt l·∫ßn",
          "C√°c m√£ s·∫Ω h·∫øt h·∫°n sau 15 ph√∫t",
          "Kh√¥ng chia s·∫ª v·ªõi b·∫•t k·ª≥ ai",
        ],
      };
    } catch (error) {
      throw new Error(`L·ªói t·∫°o m√£ d·ª± ph√≤ng: ${error.message}`);
    }
  }

  /**
   * T·∫°o m√£ d·ª± ph√≤ng ƒë·∫∑c bi·ªát
   */
  generateBackupCode() {
    const chars = "ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789";
    let code = "";

    for (let i = 0; i < SECURITY_CONFIG.BACKUP_CODE_LENGTH; i++) {
      code += chars.charAt(Math.floor(Math.random() * chars.length));
    }

    return code;
  }

  /**
   * M√£ h√≥a m√£ d·ª± ph√≤ng
   */
  encryptBackupCode(code, key) {
    const algorithm = "aes-256-cbc";
    const iv = crypto.randomBytes(16);
    const cipher = crypto.createCipher(algorithm, key.substring(0, 32));

    const encrypted = Buffer.concat([
      iv,
      cipher.update(code, "utf8"),
      cipher.final(),
    ]);

    return {
      encrypted: encrypted.toString("base64"),
      iv: iv.toString("base64"),
    };
  }

  /**
   * Gi·∫£i m√£ m√£ d·ª± ph√≤ng
   */
  decryptBackupCode(encryptedCode, key) {
    try {
      const algorithm = "aes-256-cbc";
      const iv = Buffer.from(encryptedCode.iv, "base64");
      const decipher = crypto.createDecipher(algorithm, key.substring(0, 32));

      const decrypted = Buffer.concat([
        decipher.update(Buffer.from(encryptedCode.encrypted, "base64")),
        decipher.final(),
      ]);

      return decrypted.toString("utf8");
    } catch (error) {
      throw new Error("Kh√¥ng th·ªÉ gi·∫£i m√£ m√£ d·ª± ph√≤ng");
    }
  }

  /**
   * L∆∞u tr·ªØ m√£ d·ª± ph√≤ng
   */
  storeBackupCodes(userId, backupData) {
    this.backupCodeStore.set(userId, backupData);
  }

  /**
   * X√°c minh m√£ d·ª± ph√≤ng
   */
  async verifyBackupCode(userId, providedCode, req) {
    try {
      const backupData = this.backupCodeStore.get(userId);

      if (!backupData) {
        throw new Error("Kh√¥ng t√¨m th·∫•y m√£ d·ª± ph√≤ng cho t√†i kho·∫£n n√†y");
      }

      // Ki·ªÉm tra th·ªùi h·∫°n
      if (backupData.expiresAt < Date.now()) {
        this.backupCodeStore.delete(userId);
        throw new Error("M√£ d·ª± ph√≤ng ƒë√£ h·∫øt h·∫°n");
      }

      // T√¨m m√£ d·ª± ph√≤ng ph√π h·ª£p
      let foundCode = null;
      let codeIndex = -1;

      for (let i = 0; i < backupData.codes.length; i++) {
        try {
          const decryptedCode = this.decryptBackupCode(
            backupData.codes[i],
            backupData.key
          );

          if (
            decryptedCode === providedCode &&
            !backupData.usedCodes.includes(i)
          ) {
            foundCode = decryptedCode;
            codeIndex = i;
            break;
          }
        } catch (error) {
          // B·ªè qua l·ªói gi·∫£i m√£
          continue;
        }
      }

      if (!foundCode) {
        this.recordFailedAttempt(userId);
        throw new Error("M√£ d·ª± ph√≤ng kh√¥ng h·ª£p l·ªá ho·∫∑c ƒë√£ ƒë∆∞·ª£c s·ª≠ d·ª•ng");
      }

      // ƒê√°nh d·∫•u m√£ ƒë√£ s·ª≠ d·ª•ng
      backupData.usedCodes.push(codeIndex);

      // N·∫øu ƒë√£ s·ª≠ d·ª•ng h·∫øt t·∫•t c·∫£ m√£, x√≥a kh·ªèi store
      if (backupData.usedCodes.length >= SECURITY_CONFIG.BACKUP_CODES_COUNT) {
        this.backupCodeStore.delete(userId);
      }

      return {
        success: true,
        message: "X√°c th·ª±c m√£ d·ª± ph√≤ng th√†nh c√¥ng",
        timestamp: Date.now(),
      };
    } catch (error) {
      throw new Error(`L·ªói x√°c minh m√£ d·ª± ph√≤ng: ${error.message}`);
    }
  }

  /**
   * Ki·ªÉm tra t√†i kho·∫£n c√≥ b·ªã kh√≥a kh√¥ng
   */
  isAccountLocked(userId) {
    const lockoutTime = this.lockoutStore.get(userId);
    return lockoutTime && lockoutTime > Date.now();
  }

  /**
   * Ki·ªÉm tra c√≥ trong th·ªùi gian ch·ªù g·ª≠i OTP kh√¥ng
   */
  isInOTPCooldown(userId) {
    const cooldownTime = this.otpCooldown.get(userId);
    return cooldownTime && cooldownTime > Date.now();
  }

  /**
   * L·∫•y th·ªùi gian ch·ªù c√≤n l·∫°i
   */
  getRemainingCooldownTime(userId) {
    const cooldownTime = this.otpCooldown.get(userId);
    return cooldownTime ? cooldownTime - Date.now() : 0;
  }

  /**
   * ƒê·∫∑t th·ªùi gian ch·ªù g·ª≠i OTP
   */
  setOTPCooldown(userId) {
    this.otpCooldown.set(userId, Date.now() + SECURITY_CONFIG.OTP_COOLDOWN);
  }

  /**
   * Ghi nh·∫≠n l·∫ßn th·ª≠ th·∫•t b·∫°i
   */
  recordFailedAttempt(userId) {
    if (!this.failedAttempts.has(userId)) {
      this.failedAttempts.set(userId, {
        count: 0,
        lastAttempt: Date.now(),
      });
    }

    const attempts = this.failedAttempts.get(userId);
    attempts.count++;
    attempts.lastAttempt = Date.now();

    // Kh√≥a t√†i kho·∫£n n·∫øu v∆∞·ª£t qu√° gi·ªõi h·∫°n
    if (attempts.count >= SECURITY_CONFIG.MAX_OTP_ATTEMPTS) {
      this.lockoutStore.set(
        userId,
        Date.now() + SECURITY_CONFIG.LOCKOUT_DURATION
      );
    }
  }

  /**
   * Reset th√¥ng tin x√°c th·ª±c c·ªßa user
   */
  resetUserAuthData(userId) {
    // X√≥a OTP
    for (const [key] of this.otpStore.entries()) {
      if (key.startsWith(`${userId}:`)) {
        this.otpStore.delete(key);
      }
    }

    // X√≥a m√£ d·ª± ph√≤ng
    this.backupCodeStore.delete(userId);

    // X√≥a th√¥ng tin th·∫•t b·∫°i
    this.failedAttempts.delete(userId);

    // X√≥a th√¥ng tin kh√≥a
    this.lockoutStore.delete(userId);

    // X√≥a th√¥ng tin cooldown
    this.otpCooldown.delete(userId);
  }
}

// ============================================================================
// MIDDLEWARE CH√çNH
// ============================================================================

const multiFactorAuthManager = new MultiFactorAuthManager();

/**
 * Middleware y√™u c·∫ßu x√°c th·ª±c 2FA
 */
const require2FA = async (req, res, next) => {
  try {
    // Ki·ªÉm tra user ƒë√£ ƒëƒÉng nh·∫≠p ch∆∞a
    if (!req.user) {
      return res.status(401).json({
        success: false,
        message: "Vui l√≤ng ƒëƒÉng nh·∫≠p tr∆∞·ªõc",
      });
    }

    // Ki·ªÉm tra user c√≥ ph·∫£i admin kh√¥ng
    if (req.user.role !== "admin") {
      return res.status(403).json({
        success: false,
        message: "Ch·ªâ admin m·ªõi c√≥ quy·ªÅn truy c·∫≠p t√≠nh nƒÉng n√†y",
      });
    }

    // Ki·ªÉm tra ƒë√£ x√°c th·ª±c 2FA ch∆∞a trong session n√†y
    if (req.session.twoFactorAuthenticated) {
      return next();
    }

    // N·∫øu ch∆∞a x√°c th·ª±c 2FA, tr·∫£ v·ªÅ y√™u c·∫ßu x√°c th·ª±c
    return res.status(403).json({
      success: false,
      message: "Y√™u c·∫ßu x√°c th·ª±c 2FA",
      requires2FA: true,
      availableMethods: ["otp", "backup_code"],
    });
  } catch (error) {
    console.error("‚ùå 2FA middleware error:", error);
    return res.status(500).json({
      success: false,
      message: "L·ªói server khi ki·ªÉm tra x√°c th·ª±c 2FA",
    });
  }
};

/**
 * Middleware g·ª≠i OTP
 */
const sendOTP = async (req, res) => {
  try {
    if (!req.user) {
      return res.status(401).json({
        success: false,
        message: "Vui l√≤ng ƒëƒÉng nh·∫≠p tr∆∞·ªõc",
      });
    }

    const result = await multiFactorAuthManager.generateAndSendOTP(
      req.user,
      req
    );

    return res.status(200).json(result);
  } catch (error) {
    console.error("‚ùå Send OTP error:", error);
    return res.status(500).json({
      success: false,
      message: error.message,
    });
  }
};

/**
 * Middleware x√°c minh OTP
 */
const verifyOTP = async (req, res) => {
  try {
    if (!req.user) {
      return res.status(401).json({
        success: false,
        message: "Vui l√≤ng ƒëƒÉng nh·∫≠p tr∆∞·ªõc",
      });
    }

    const { otpId, otp } = req.body;

    if (!otpId || !otp) {
      return res.status(400).json({
        success: false,
        message: "OTP ID v√† OTP l√† b·∫Øt bu·ªôc",
      });
    }

    const result = await multiFactorAuthManager.verifyOTP(
      req.user._id,
      otpId,
      otp,
      req
    );

    // ƒê√°nh d·∫•u ƒë√£ x√°c th·ª±c 2FA trong session
    req.session.twoFactorAuthenticated = true;
    req.session.twoFactorAuthTime = Date.now();

    return res.status(200).json(result);
  } catch (error) {
    console.error("‚ùå Verify OTP error:", error);
    return res.status(400).json({
      success: false,
      message: error.message,
    });
  }
};

/**
 * Middleware x√°c minh m√£ d·ª± ph√≤ng
 */
const verifyBackupCode = async (req, res) => {
  try {
    if (!req.user) {
      return res.status(401).json({
        success: false,
        message: "Vui l√≤ng ƒëƒÉng nh·∫≠p tr∆∞·ªõc",
      });
    }

    const { backupCode } = req.body;

    if (!backupCode) {
      return res.status(400).json({
        success: false,
        message: "M√£ d·ª± ph√≤ng l√† b·∫Øt bu·ªôc",
      });
    }

    const result = await multiFactorAuthManager.verifyBackupCode(
      req.user._id,
      backupCode,
      req
    );

    // ƒê√°nh d·∫•u ƒë√£ x√°c th·ª±c 2FA trong session
    req.session.twoFactorAuthenticated = true;
    req.session.twoFactorAuthTime = Date.now();

    return res.status(200).json(result);
  } catch (error) {
    console.error("‚ùå Verify backup code error:", error);
    return res.status(400).json({
      success: false,
      message: error.message,
    });
  }
};

/**
 * Middleware t·∫°o m√£ d·ª± ph√≤ng
 */
const generateBackupCodes = async (req, res) => {
  try {
    if (!req.user) {
      return res.status(401).json({
        success: false,
        message: "Vui l√≤ng ƒëƒÉng nh·∫≠p tr∆∞·ªõc",
      });
    }

    const result = await multiFactorAuthManager.generateBackupCodes(
      req.user._id,
      req.sessionID
    );

    return res.status(200).json({
      success: true,
      message: "M√£ d·ª± ph√≤ng ƒë√£ ƒë∆∞·ª£c t·∫°o th√†nh c√¥ng",
      data: result,
    });
  } catch (error) {
    console.error("‚ùå Generate backup codes error:", error);
    return res.status(500).json({
      success: false,
      message: error.message,
    });
  }
};

/**
 * Middleware ki·ªÉm tra tr·∫°ng th√°i x√°c th·ª±c 2FA
 */
const check2FAStatus = (req, res) => {
  try {
    if (!req.user) {
      return res.status(401).json({
        success: false,
        message: "Vui l√≤ng ƒëƒÉng nh·∫≠p tr∆∞·ªõc",
      });
    }

    const isAuthenticated = req.session.twoFactorAuthenticated;
    const authTime = req.session.twoFactorAuthTime;
    const timeSinceAuth = authTime ? Date.now() - authTime : null;

    return res.status(200).json({
      success: true,
      data: {
        is2FAAuthenticated: isAuthenticated,
        authenticatedAt: authTime,
        timeSinceAuthentication: timeSinceAuth,
        expiresIn: timeSinceAuth ? 15 * 60 * 1000 - timeSinceAuth : null, // 15 ph√∫t
      },
    });
  } catch (error) {
    console.error("‚ùå Check 2FA status error:", error);
    return res.status(500).json({
      success: false,
      message: "L·ªói server khi ki·ªÉm tra tr·∫°ng th√°i 2FA",
    });
  }
};

/**
 * Middleware logout kh·ªèi 2FA
 */
const logout2FA = (req, res) => {
  try {
    if (!req.user) {
      return res.status(401).json({
        success: false,
        message: "Vui l√≤ng ƒëƒÉng nh·∫≠p tr∆∞·ªõc",
      });
    }

    // X√≥a th√¥ng tin x√°c th·ª±c 2FA kh·ªèi session
    delete req.session.twoFactorAuthenticated;
    delete req.session.twoFactorAuthTime;

    // Reset d·ªØ li·ªáu x√°c th·ª±c c·ªßa user
    multiFactorAuthManager.resetUserAuthData(req.user._id);

    return res.status(200).json({
      success: true,
      message: "ƒê√£ ƒëƒÉng xu·∫•t kh·ªèi x√°c th·ª±c 2FA",
    });
  } catch (error) {
    console.error("‚ùå Logout 2FA error:", error);
    return res.status(500).json({
      success: false,
      message: "L·ªói server khi ƒëƒÉng xu·∫•t 2FA",
    });
  }
};

// ============================================================================
// XU·∫§T C√ÅC H√ÄM V√Ä MIDDLEWARE
// ============================================================================

module.exports = {
  MultiFactorAuthManager,
  require2FA,
  sendOTP,
  verifyOTP,
  verifyBackupCode,
  generateBackupCodes,
  check2FAStatus,
  logout2FA,
  SECURITY_CONFIG,
};
