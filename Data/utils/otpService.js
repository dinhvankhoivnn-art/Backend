/**
 * H·ªá th·ªëng OTP (One-Time Password) qua email
 * Cung c·∫•p c√°c ch·ª©c nƒÉng t·∫°o, g·ª≠i v√† x√°c minh OTP
 * T√≠ch h·ª£p v·ªõi nodemailer v√† b·∫£o m·∫≠t cao
 */

const crypto = require("crypto");
const nodemailer = require("nodemailer");
const User = require("../models/User");
const CreateNewUser = require("../models/CreateNewUser");

/**
 * C·∫•u h√¨nh OTP
 */
const OTP_CONFIG = {
  // ƒê·ªô d√†i OTP
  LENGTH: 6,

  // Th·ªùi gian h·∫øt h·∫°n (ph√∫t)
  EXPIRY_MINUTES: 15,

  // S·ªë l·∫ßn th·ª≠ t·ªëi ƒëa
  MAX_ATTEMPTS: 3,

  // Th·ªùi gian cooldown gi·ªØa c√°c l·∫ßn g·ª≠i (gi√¢y)
  COOLDOWN_SECONDS: 60,

  // Subject email
  EMAIL_SUBJECT: "M√£ x√°c minh OTP",

  // Template email
  EMAIL_TEMPLATE: (otp, expiryMinutes) => `
    <div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;">
      <h2 style="color: #333;">M√£ x√°c minh OTP</h2>
      <p>Xin ch√†o,</p>
      <p>B·∫°n ƒë√£ y√™u c·∫ßu m√£ x√°c minh OTP. M√£ c·ªßa b·∫°n l√†:</p>
      <div style="background-color: #f0f0f0; padding: 20px; text-align: center; margin: 20px 0;">
        <h1 style="color: #333; margin: 0; font-size: 32px; letter-spacing: 5px;">${otp}</h1>
      </div>
      <p><strong>L∆∞u √Ω:</strong></p>
      <ul>
        <li>M√£ n√†y c√≥ hi·ªáu l·ª±c trong ${expiryMinutes} ph√∫t</li>
        <li>Kh√¥ng chia s·∫ª m√£ n√†y v·ªõi b·∫•t k·ª≥ ai</li>
        <li>N·∫øu b·∫°n kh√¥ng y√™u c·∫ßu m√£ n√†y, vui l√≤ng b·ªè qua email n√†y</li>
      </ul>
      <p>N·∫øu b·∫°n g·∫∑p v·∫•n ƒë·ªÅ, vui l√≤ng li√™n h·ªá h·ªó tr·ª£.</p>
      <hr style="margin: 30px 0;">
      <p style="color: #666; font-size: 12px;">
        Email n√†y ƒë∆∞·ª£c g·ª≠i t·ª± ƒë·ªông t·ª´ h·ªá th·ªëng. Vui l√≤ng kh√¥ng tr·∫£ l·ªùi.
      </p>
    </div>
  `,
};

/**
 * L·ªõp qu·∫£n l√Ω OTP
 */
class OTPService {
  constructor() {
    this.otpStore = new Map(); // Trong production, s·ª≠ d·ª•ng Redis
    this.cooldownStore = new Map();
    this.attemptStore = new Map();
    this.transporter = null;
    this.initialized = false;
  }

  /**
   * Kh·ªüi t·∫°o OTP service
   */
  async initialize() {
    if (this.initialized) return;

    try {
      // Kh·ªüi t·∫°o nodemailer transporter
      await this.initializeEmailTransporter();

      this.initialized = true;
      console.log("üìß OTP Service initialized successfully");
    } catch (error) {
      console.error("‚ùå Failed to initialize OTP Service:", error);
      throw new Error("OTP Service initialization failed");
    }
  }

  /**
   * Kh·ªüi t·∫°o email transporter
   */
  async initializeEmailTransporter() {
    try {
      this.transporter = nodemailer.createTransporter({
        host: process.env.SMTP_HOST || "smtp.gmail.com",
        port: process.env.SMTP_PORT || 587,
        secure: false, // true for 465, false for other ports
        auth: {
          user: process.env.SMTP_USER,
          pass: process.env.SMTP_PASS,
        },
        tls: {
          ciphers: "SSLv3",
          rejectUnauthorized: false,
        },
      });

      // Verify connection
      await this.transporter.verify();
      console.log("‚úÖ Email transporter verified");
    } catch (error) {
      console.error("‚ùå Email transporter initialization failed:", error);
      // Fallback to console logging in development
      if (process.env.NODE_ENV === "development") {
        console.warn("‚ö†Ô∏è Using console fallback for OTP emails");
        this.transporter = null;
      } else {
        throw error;
      }
    }
  }

  /**
   * T·∫°o OTP ng·∫´u nhi√™n
   */
  generateOTP() {
    const digits = "0123456789";
    let otp = "";

    for (let i = 0; i < OTP_CONFIG.LENGTH; i++) {
      const randomIndex = crypto.randomInt(0, digits.length);
      otp += digits[randomIndex];
    }

    return otp;
  }

  /**
   * T·∫°o OTP v·ªõi entropy cao
   */
  generateSecureOTP() {
    // T·∫°o entropy t·ª´ nhi·ªÅu ngu·ªìn
    const timestamp = Date.now().toString();
    const randomBytes = crypto.randomBytes(32).toString("hex");
    const combined = timestamp + randomBytes;

    // T·∫°o hash v√† l·∫•y 6 ch·ªØ s·ªë cu·ªëi
    const hash = crypto.createHash("sha256").update(combined).digest("hex");
    const otp = hash.substring(hash.length - OTP_CONFIG.LENGTH);

    return otp;
  }

  /**
   * T·∫°o m√£ OTP v·ªõi metadata
   */
  async createOTP(email, purpose = "general", metadata = {}) {
    try {
      // Ki·ªÉm tra cooldown
      if (this.isInCooldown(email)) {
        const remainingTime = this.getRemainingCooldownTime(email);
        throw new Error(
          `Vui l√≤ng ƒë·ª£i ${remainingTime} gi√¢y tr∆∞·ªõc khi y√™u c·∫ßu OTP m·ªõi`
        );
      }

      // T·∫°o OTP
      const otp = this.generateSecureOTP();
      const expiresAt = new Date(
        Date.now() + OTP_CONFIG.EXPIRY_MINUTES * 60 * 1000
      );

      // T·∫°o key ƒë·ªÉ l∆∞u tr·ªØ
      const storageKey = this.generateStorageKey(email, purpose);

      // L∆∞u OTP v√†o store
      this.otpStore.set(storageKey, {
        otp: otp,
        email: email,
        purpose: purpose,
        expiresAt: expiresAt,
        attempts: 0,
        createdAt: new Date(),
        metadata: metadata,
      });

      // Set cooldown
      this.cooldownStore.set(
        email,
        Date.now() + OTP_CONFIG.COOLDOWN_SECONDS * 1000
      );

      // Reset attempt count
      this.attemptStore.delete(storageKey);

      console.log(`üì± OTP created:`, {
        email: email,
        purpose: purpose,
        expiresAt: expiresAt,
        metadata: metadata,
      });

      return {
        otp: otp,
        expiresAt: expiresAt,
        purpose: purpose,
      };
    } catch (error) {
      console.error("‚ùå Create OTP error:", error);
      throw error;
    }
  }

  /**
   * G·ª≠i OTP qua email
   */
  async sendOTPByEmail(email, purpose = "general", metadata = {}) {
    try {
      // T·∫°o OTP
      const otpData = await this.createOTP(email, purpose, metadata);

      // Chu·∫©n b·ªã email
      const mailOptions = {
        from: {
          name: "H·ªá th·ªëng x√°c th·ª±c",
          address: process.env.SMTP_USER,
        },
        to: email,
        subject: OTP_CONFIG.EMAIL_SUBJECT,
        html: OTP_CONFIG.EMAIL_TEMPLATE(otpData.otp, OTP_CONFIG.EXPIRY_MINUTES),
        text: `M√£ OTP c·ªßa b·∫°n l√†: ${otpData.otp}. Hi·ªáu l·ª±c trong ${OTP_CONFIG.EXPIRY_MINUTES} ph√∫t.`,
      };

      // G·ª≠i email
      if (this.transporter) {
        await this.transporter.sendMail(mailOptions);
        console.log(`üìß OTP email sent to:`, { email, purpose });
      } else {
        // Fallback to console in development
        console.log(`üìß OTP Email (Development Mode):`, {
          to: email,
          otp: otpData.otp,
          purpose: purpose,
        });
      }

      return {
        success: true,
        message: "OTP ƒë√£ ƒë∆∞·ª£c g·ª≠i qua email",
        expiresAt: otpData.expiresAt,
        purpose: purpose,
      };
    } catch (error) {
      console.error("‚ùå Send OTP by email error:", error);
      throw new Error("Kh√¥ng th·ªÉ g·ª≠i OTP qua email");
    }
  }

  /**
   * X√°c minh OTP
   */
  async verifyOTP(email, otp, purpose = "general") {
    try {
      const storageKey = this.generateStorageKey(email, purpose);

      // L·∫•y OTP data t·ª´ store
      const otpData = this.otpStore.get(storageKey);
      if (!otpData) {
        throw new Error("OTP kh√¥ng t·ªìn t·∫°i ho·∫∑c ƒë√£ h·∫øt h·∫°n");
      }

      // Ki·ªÉm tra h·∫øt h·∫°n
      if (new Date() > otpData.expiresAt) {
        this.otpStore.delete(storageKey);
        throw new Error("OTP ƒë√£ h·∫øt h·∫°n");
      }

      // Ki·ªÉm tra s·ªë l·∫ßn th·ª≠
      const currentAttempts = this.attemptStore.get(storageKey) || 0;
      if (currentAttempts >= OTP_CONFIG.MAX_ATTEMPTS) {
        this.otpStore.delete(storageKey);
        this.attemptStore.delete(storageKey);
        throw new Error("ƒê√£ v∆∞·ª£t qu√° s·ªë l·∫ßn th·ª≠ cho ph√©p");
      }

      // X√°c minh OTP
      const isValid = otpData.otp === otp;

      if (isValid) {
        // X√≥a OTP sau khi s·ª≠ d·ª•ng th√†nh c√¥ng
        this.otpStore.delete(storageKey);
        this.attemptStore.delete(storageKey);
        this.cooldownStore.delete(email);

        console.log(`‚úÖ OTP verified successfully:`, {
          email: email,
          purpose: purpose,
          attempts: currentAttempts + 1,
        });

        return {
          success: true,
          message: "OTP x√°c minh th√†nh c√¥ng",
          purpose: purpose,
          metadata: otpData.metadata,
        };
      } else {
        // TƒÉng s·ªë l·∫ßn th·ª≠
        this.attemptStore.set(storageKey, currentAttempts + 1);

        console.log(`‚ùå OTP verification failed:`, {
          email: email,
          purpose: purpose,
          attempt: currentAttempts + 1,
          maxAttempts: OTP_CONFIG.MAX_ATTEMPTS,
        });

        const remainingAttempts =
          OTP_CONFIG.MAX_ATTEMPTS - (currentAttempts + 1);

        throw new Error(`OTP kh√¥ng ƒë√∫ng. C√≤n ${remainingAttempts} l·∫ßn th·ª≠`);
      }
    } catch (error) {
      console.error("‚ùå Verify OTP error:", error);
      throw error;
    }
  }

  /**
   * L·∫•y th√¥ng tin OTP (cho admin)
   */
  getOTPInfo(email, purpose = "general") {
    const storageKey = this.generateStorageKey(email, purpose);
    const otpData = this.otpStore.get(storageKey);

    if (!otpData) {
      return null;
    }

    return {
      email: otpData.email,
      purpose: otpData.purpose,
      expiresAt: otpData.expiresAt,
      attempts: this.attemptStore.get(storageKey) || 0,
      maxAttempts: OTP_CONFIG.MAX_ATTEMPTS,
      createdAt: otpData.createdAt,
      timeRemaining: Math.max(
        0,
        Math.floor((otpData.expiresAt - new Date()) / 1000)
      ),
      isExpired: new Date() > otpData.expiresAt,
    };
  }

  /**
   * X√≥a OTP
   */
  deleteOTP(email, purpose = "general") {
    const storageKey = this.generateStorageKey(email, purpose);

    this.otpStore.delete(storageKey);
    this.attemptStore.delete(storageKey);
    this.cooldownStore.delete(email);

    console.log(`üóëÔ∏è OTP deleted:`, { email, purpose });
  }

  /**
   * X√≥a t·∫•t c·∫£ OTP c·ªßa email
   */
  deleteAllOTPs(email) {
    for (const [key, value] of this.otpStore.entries()) {
      if (value.email === email) {
        this.otpStore.delete(key);
        this.attemptStore.delete(key);
      }
    }

    this.cooldownStore.delete(email);
    console.log(`üóëÔ∏è All OTPs deleted for email:`, { email });
  }

  /**
   * Cleanup OTP h·∫øt h·∫°n
   */
  cleanupExpiredOTPs() {
    const now = new Date();
    let cleanedCount = 0;

    for (const [key, otpData] of this.otpStore.entries()) {
      if (now > otpData.expiresAt) {
        this.otpStore.delete(key);
        this.attemptStore.delete(key);
        cleanedCount++;
      }
    }

    // Cleanup cooldown c≈©
    for (const [email, cooldownEnd] of this.cooldownStore.entries()) {
      if (now > new Date(cooldownEnd)) {
        this.cooldownStore.delete(email);
      }
    }

    if (cleanedCount > 0) {
      console.log(`üßπ Cleaned up ${cleanedCount} expired OTPs`);
    }

    return cleanedCount;
  }

  /**
   * L·∫•y th·ªëng k√™ OTP
   */
  getStats() {
    const now = new Date();
    let activeCount = 0;
    let expiredCount = 0;
    let totalAttempts = 0;

    for (const [key, otpData] of this.otpStore.entries()) {
      if (now > otpData.expiresAt) {
        expiredCount++;
      } else {
        activeCount++;
      }

      const attempts = this.attemptStore.get(key) || 0;
      totalAttempts += attempts;
    }

    return {
      activeOTPs: activeCount,
      expiredOTPs: expiredCount,
      totalAttempts: totalAttempts,
      cooldownActive: this.cooldownStore.size,
      totalStored: this.otpStore.size,
    };
  }

  /**
   * Utility: T·∫°o storage key
   */
  generateStorageKey(email, purpose) {
    const keyData = `${email}:${purpose}:${Date.now()}`;
    return crypto.createHash("sha256").update(keyData).digest("hex");
  }

  /**
   * Utility: Ki·ªÉm tra cooldown
   */
  isInCooldown(email) {
    const cooldownEnd = this.cooldownStore.get(email);
    if (!cooldownEnd) return false;

    return new Date() < new Date(cooldownEnd);
  }

  /**
   * Utility: L·∫•y th·ªùi gian cooldown c√≤n l·∫°i
   */
  getRemainingCooldownTime(email) {
    const cooldownEnd = this.cooldownStore.get(email);
    if (!cooldownEnd) return 0;

    const remaining = new Date(cooldownEnd) - new Date();
    return Math.max(0, Math.floor(remaining / 1000));
  }
}

/**
 * H·ªá th·ªëng 2FA (Two-Factor Authentication)
 */
class TwoFactorAuthService {
  constructor(otpService) {
    this.otpService = otpService;
    this.twoFactorStore = new Map();
    this.initialized = false;
  }

  /**
   * Kh·ªüi t·∫°o 2FA service
   */
  async initialize() {
    this.initialized = true;
    console.log("üîê 2FA Service initialized");
  }

  /**
   * B·∫≠t 2FA cho user
   */
  async enable2FA(userId, email) {
    try {
      // Ki·ªÉm tra user c√≥ t·ªìn t·∫°i kh√¥ng
      const user = await User.findById(userId);
      if (!user) {
        throw new Error("User kh√¥ng t·ªìn t·∫°i");
      }

      // T·∫°o secret key cho 2FA
      const secretKey = crypto.randomBytes(32).toString("hex");

      // L∆∞u th√¥ng tin 2FA
      this.twoFactorStore.set(userId, {
        enabled: false, // Ch∆∞a enable cho ƒë·∫øn khi x√°c minh
        secretKey: secretKey,
        backupCodes: await this.generateBackupCodes(),
        enabledAt: null,
        lastUsed: null,
      });

      // G·ª≠i OTP ƒë·ªÉ x√°c minh vi·ªác b·∫≠t 2FA
      const otpResult = await this.otpService.sendOTPByEmail(
        email,
        "enable_2fa",
        { userId, action: "enable_2fa" }
      );

      console.log(`üîê 2FA enable initiated:`, { userId, email });

      return {
        success: true,
        message: "OTP ƒë√£ ƒë∆∞·ª£c g·ª≠i ƒë·ªÉ x√°c minh vi·ªác b·∫≠t 2FA",
        requiresVerification: true,
        expiresAt: otpResult.expiresAt,
      };
    } catch (error) {
      console.error("‚ùå Enable 2FA error:", error);
      throw error;
    }
  }

  /**
   * X√°c minh v√† ho√†n th√†nh vi·ªác b·∫≠t 2FA
   */
  async verifyAndEnable2FA(userId, email, otp) {
    try {
      // X√°c minh OTP
      const otpResult = await this.otpService.verifyOTP(
        email,
        otp,
        "enable_2fa"
      );

      // L·∫•y th√¥ng tin 2FA
      const twoFactorData = this.twoFactorStore.get(userId);
      if (!twoFactorData) {
        throw new Error("Kh√¥ng t√¨m th·∫•y th√¥ng tin 2FA");
      }

      // B·∫≠t 2FA
      twoFactorData.enabled = true;
      twoFactorData.enabledAt = new Date();

      console.log(`‚úÖ 2FA enabled successfully:`, { userId });

      return {
        success: true,
        message: "2FA ƒë√£ ƒë∆∞·ª£c b·∫≠t th√†nh c√¥ng",
        backupCodes: twoFactorData.backupCodes,
        enabledAt: twoFactorData.enabledAt,
      };
    } catch (error) {
      console.error("‚ùå Verify and enable 2FA error:", error);
      throw error;
    }
  }

  /**
   * T·∫Øt 2FA
   */
  async disable2FA(userId, email) {
    try {
      // X√°c minh OTP tr∆∞·ªõc khi t·∫Øt
      await this.otpService.verifyOTP(email, otp, "disable_2fa");

      // T·∫Øt 2FA
      this.twoFactorStore.delete(userId);

      console.log(`üö´ 2FA disabled:`, { userId });

      return {
        success: true,
        message: "2FA ƒë√£ ƒë∆∞·ª£c t·∫Øt",
      };
    } catch (error) {
      console.error("‚ùå Disable 2FA error:", error);
      throw error;
    }
  }

  /**
   * X√°c minh 2FA
   */
  async verify2FA(userId, otp) {
    try {
      // L·∫•y th√¥ng tin 2FA
      const twoFactorData = this.twoFactorStore.get(userId);
      if (!twoFactorData || !twoFactorData.enabled) {
        throw new Error("2FA ch∆∞a ƒë∆∞·ª£c b·∫≠t");
      }

      // L·∫•y email c·ªßa user
      const user = await User.findById(userId);
      if (!user) {
        throw new Error("User kh√¥ng t·ªìn t·∫°i");
      }

      // X√°c minh OTP
      const otpResult = await this.otpService.verifyOTP(
        user.email,
        otp,
        "2fa_verification"
      );

      // C·∫≠p nh·∫≠t th·ªùi gian s·ª≠ d·ª•ng cu·ªëi
      twoFactorData.lastUsed = new Date();

      return {
        success: true,
        message: "X√°c minh 2FA th√†nh c√¥ng",
        verifiedAt: new Date(),
      };
    } catch (error) {
      console.error("‚ùå Verify 2FA error:", error);
      throw error;
    }
  }

  /**
   * T·∫°o backup codes
   */
  async generateBackupCodes() {
    const codes = [];
    const usedCodes = new Set();

    for (let i = 0; i < 10; i++) {
      let code;
      do {
        code = crypto.randomBytes(4).toString("hex").toUpperCase();
      } while (usedCodes.has(code));

      usedCodes.add(code);
      codes.push({
        code: code,
        used: false,
        createdAt: new Date(),
      });
    }

    return codes;
  }

  /**
   * X√°c minh backup code
   */
  async verifyBackupCode(userId, backupCode) {
    try {
      const twoFactorData = this.twoFactorStore.get(userId);
      if (!twoFactorData || !twoFactorData.enabled) {
        throw new Error("2FA ch∆∞a ƒë∆∞·ª£c b·∫≠t");
      }

      // T√¨m backup code
      const codeIndex = twoFactorData.backupCodes.findIndex(
        (code) => code.code === backupCode && !code.used
      );

      if (codeIndex === -1) {
        throw new Error("Backup code kh√¥ng h·ª£p l·ªá ho·∫∑c ƒë√£ s·ª≠ d·ª•ng");
      }

      // ƒê√°nh d·∫•u code ƒë√£ s·ª≠ d·ª•ng
      twoFactorData.backupCodes[codeIndex].used = true;
      twoFactorData.backupCodes[codeIndex].usedAt = new Date();

      console.log(`üîë Backup code used:`, { userId, codeIndex: codeIndex + 1 });

      return {
        success: true,
        message: "Backup code x√°c minh th√†nh c√¥ng",
        usedAt: new Date(),
      };
    } catch (error) {
      console.error("‚ùå Verify backup code error:", error);
      throw error;
    }
  }

  /**
   * L·∫•y th√¥ng tin 2FA c·ªßa user
   */
  get2FAInfo(userId) {
    const twoFactorData = this.twoFactorStore.get(userId);

    if (!twoFactorData) {
      return { enabled: false };
    }

    return {
      enabled: twoFactorData.enabled,
      enabledAt: twoFactorData.enabledAt,
      lastUsed: twoFactorData.lastUsed,
      backupCodesCount: twoFactorData.backupCodes.filter((code) => !code.used)
        .length,
      totalBackupCodes: twoFactorData.backupCodes.length,
    };
  }

  /**
   * T·∫°o backup codes m·ªõi
   */
  async regenerateBackupCodes(userId, email) {
    try {
      // X√°c minh OTP tr∆∞·ªõc khi t·∫°o backup codes m·ªõi
      await this.otpService.verifyOTP(email, otp, "regenerate_backup_codes");

      const twoFactorData = this.twoFactorStore.get(userId);
      if (!twoFactorData) {
        throw new Error("2FA ch∆∞a ƒë∆∞·ª£c b·∫≠t");
      }

      // T·∫°o backup codes m·ªõi
      twoFactorData.backupCodes = await this.generateBackupCodes();

      console.log(`üîÑ Backup codes regenerated:`, { userId });

      return {
        success: true,
        message: "Backup codes ƒë√£ ƒë∆∞·ª£c t·∫°o m·ªõi",
        backupCodes: twoFactorData.backupCodes,
      };
    } catch (error) {
      console.error("‚ùå Regenerate backup codes error:", error);
      throw error;
    }
  }
}

/**
 * H·ªá th·ªëng m√£ d·ª± ph√≤ng
 */
class BackupCodeService {
  constructor() {
    this.backupCodeStore = new Map();
    this.initialized = false;
  }

  /**
   * Kh·ªüi t·∫°o backup code service
   */
  async initialize() {
    this.initialized = true;
    console.log("üîë Backup Code Service initialized");
  }

  /**
   * T·∫°o backup codes cho user
   */
  async generateBackupCodes(userId, count = 10) {
    try {
      const codes = [];
      const usedCodes = new Set();

      for (let i = 0; i < count; i++) {
        let code;
        do {
          // T·∫°o code 8 k√Ω t·ª± v·ªõi ch·ªØ v√† s·ªë
          const chars = "ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789";
          code = "";
          for (let j = 0; j < 8; j++) {
            code += chars[crypto.randomInt(0, chars.length)];
          }
        } while (usedCodes.has(code));

        usedCodes.add(code);
        codes.push({
          code: code,
          used: false,
          createdAt: new Date(),
          expiresAt: new Date(Date.now() + 15 * 60 * 1000), // 15 ph√∫t
        });
      }

      // L∆∞u v√†o store
      this.backupCodeStore.set(userId, {
        codes: codes,
        generatedAt: new Date(),
      });

      console.log(`üîë Backup codes generated:`, {
        userId,
        count: codes.length,
        expiresAt: codes[0].expiresAt,
      });

      return codes;
    } catch (error) {
      console.error("‚ùå Generate backup codes error:", error);
      throw error;
    }
  }

  /**
   * X√°c minh backup code
   */
  async verifyBackupCode(userId, code) {
    try {
      const backupData = this.backupCodeStore.get(userId);
      if (!backupData) {
        throw new Error("Kh√¥ng t√¨m th·∫•y backup codes");
      }

      // T√¨m code trong danh s√°ch
      const codeIndex = backupData.codes.findIndex(
        (c) => c.code === code && !c.used && new Date() < c.expiresAt
      );

      if (codeIndex === -1) {
        throw new Error("Backup code kh√¥ng h·ª£p l·ªá, ƒë√£ s·ª≠ d·ª•ng ho·∫∑c h·∫øt h·∫°n");
      }

      // ƒê√°nh d·∫•u code ƒë√£ s·ª≠ d·ª•ng
      backupData.codes[codeIndex].used = true;
      backupData.codes[codeIndex].usedAt = new Date();

      console.log(`‚úÖ Backup code verified:`, {
        userId,
        codeIndex: codeIndex + 1,
        expiresAt: backupData.codes[codeIndex].expiresAt,
      });

      return {
        success: true,
        message: "Backup code x√°c minh th√†nh c√¥ng",
        verifiedAt: new Date(),
        remainingCodes: backupData.codes.filter((c) => !c.used).length,
      };
    } catch (error) {
      console.error("‚ùå Verify backup code error:", error);
      throw error;
    }
  }

  /**
   * L·∫•y th√¥ng tin backup codes
   */
  getBackupCodeInfo(userId) {
    const backupData = this.backupCodeStore.get(userId);

    if (!backupData) {
      return { hasCodes: false };
    }

    return {
      hasCodes: true,
      generatedAt: backupData.generatedAt,
      totalCodes: backupData.codes.length,
      usedCodes: backupData.codes.filter((c) => c.used).length,
      remainingCodes: backupData.codes.filter((c) => !c.used).length,
      expiredCodes: backupData.codes.filter((c) => new Date() > c.expiresAt)
        .length,
    };
  }

  /**
   * X√≥a backup codes h·∫øt h·∫°n
   */
  cleanupExpiredCodes() {
    const now = new Date();
    let cleanedCount = 0;

    for (const [userId, backupData] of this.backupCodeStore.entries()) {
      const expiredCodes = backupData.codes.filter((c) => now > c.expiresAt);

      if (expiredCodes.length > 0) {
        // X√≥a c√°c codes h·∫øt h·∫°n
        backupData.codes = backupData.codes.filter((c) => now <= c.expiresAt);
        cleanedCount += expiredCodes.length;
      }

      // N·∫øu kh√¥ng c√≤n codes n√†o, x√≥a entry
      if (backupData.codes.length === 0) {
        this.backupCodeStore.delete(userId);
      }
    }

    if (cleanedCount > 0) {
      console.log(`üßπ Cleaned up ${cleanedCount} expired backup codes`);
    }

    return cleanedCount;
  }
}

/**
 * Service ch√≠nh cho authentication v·ªõi OTP v√† 2FA
 */
class AdvancedAuthService {
  constructor() {
    this.otpService = new OTPService();
    this.twoFactorService = null;
    this.backupCodeService = new BackupCodeService();
    this.initialized = false;
  }

  /**
   * Kh·ªüi t·∫°o to√†n b·ªô auth service
   */
  async initialize() {
    if (this.initialized) return;

    try {
      // Kh·ªüi t·∫°o c√°c services
      await this.otpService.initialize();
      await this.backupCodeService.initialize();
      this.twoFactorService = new TwoFactorAuthService(this.otpService);
      await this.twoFactorService.initialize();

      // Setup cleanup interval
      this.setupCleanupInterval();

      this.initialized = true;
      console.log("üîê Advanced Auth Service initialized successfully");
    } catch (error) {
      console.error("‚ùå Failed to initialize Advanced Auth Service:", error);
      throw new Error("Advanced Auth Service initialization failed");
    }
  }

  /**
   * Setup cleanup interval
   */
  setupCleanupInterval() {
    // Cleanup m·ªói 5 ph√∫t
    setInterval(() => {
      this.otpService.cleanupExpiredOTPs();
      this.backupCodeService.cleanupExpiredCodes();
    }, 5 * 60 * 1000);
  }

  /**
   * X√°c th·ª±c v·ªõi nhi·ªÅu l·ªõp b·∫£o m·∫≠t
   */
  async authenticateWithLayers(
    userId,
    password,
    otp = null,
    backupCode = null
  ) {
    try {
      // B∆∞·ªõc 1: Ki·ªÉm tra user t·ªìn t·∫°i
      const user = await User.findById(userId);
      if (!user) {
        throw new Error("User kh√¥ng t·ªìn t·∫°i");
      }

      // B∆∞·ªõc 2: X√°c minh m·∫≠t kh·∫©u
      const isPasswordValid = await user.comparePassword(password);
      if (!isPasswordValid) {
        throw new Error("M·∫≠t kh·∫©u kh√¥ng ƒë√∫ng");
      }

      // B∆∞·ªõc 3: Ki·ªÉm tra 2FA n·∫øu ƒë∆∞·ª£c b·∫≠t
      const twoFactorInfo = this.twoFactorService.get2FAInfo(userId);

      if (twoFactorInfo.enabled) {
        if (!otp && !backupCode) {
          throw new Error("Y√™u c·∫ßu OTP ho·∫∑c backup code cho 2FA");
        }

        if (otp) {
          // X√°c minh OTP
          await this.twoFactorService.verify2FA(userId, otp);
        } else if (backupCode) {
          // X√°c minh backup code
          await this.backupCodeService.verifyBackupCode(userId, backupCode);
        }
      }

      console.log(`üîê Multi-layer authentication successful:`, {
        userId,
        has2FA: twoFactorInfo.enabled,
        usedOTP: !!otp,
        usedBackupCode: !!backupCode,
      });

      return {
        success: true,
        message: "X√°c th·ª±c th√†nh c√¥ng",
        user: {
          id: user._id,
          email: user.email,
          role: user.role,
          has2FA: twoFactorInfo.enabled,
        },
        authentication: {
          passwordVerified: true,
          twoFactorVerified: twoFactorInfo.enabled,
          method: otp ? "otp" : backupCode ? "backup_code" : "password_only",
        },
      };
    } catch (error) {
      console.error("‚ùå Multi-layer authentication error:", error);
      throw error;
    }
  }

  /**
   * G·ª≠i OTP cho admin access
   */
  async requestAdminAccess(email, purpose = "admin_access") {
    try {
      // Ki·ªÉm tra user c√≥ ph·∫£i admin kh√¥ng
      const user = await User.findByEmail(email);
      if (!user) {
        throw new Error("User kh√¥ng t·ªìn t·∫°i");
      }

      if (user.role !== "admin") {
        throw new Error("Ch·ªâ admin m·ªõi c√≥ quy·ªÅn truy c·∫≠p");
      }

      // G·ª≠i OTP
      const result = await this.otpService.sendOTPByEmail(email, purpose, {
        userId: user._id,
        role: user.role,
        action: "admin_access",
      });

      return {
        success: true,
        message: "OTP ƒë√£ ƒë∆∞·ª£c g·ª≠i ƒë·ªÉ x√°c minh quy·ªÅn admin",
        expiresAt: result.expiresAt,
      };
    } catch (error) {
      console.error("‚ùå Request admin access error:", error);
      throw error;
    }
  }

  /**
   * X√°c minh admin access
   */
  async verifyAdminAccess(email, otp, purpose = "admin_access") {
    try {
      // X√°c minh OTP
      const otpResult = await this.otpService.verifyOTP(email, otp, purpose);

      // L·∫•y th√¥ng tin user
      const user = await User.findByEmail(email);

      return {
        success: true,
        message: "X√°c minh quy·ªÅn admin th√†nh c√¥ng",
        adminUser: {
          id: user._id,
          email: user.email,
          role: user.role,
        },
        verifiedAt: new Date(),
      };
    } catch (error) {
      console.error("‚ùå Verify admin access error:", error);
      throw error;
    }
  }

  /**
   * L·∫•y th·ªëng k√™ authentication
   */
  getAuthStats() {
    return {
      otp: this.otpService.getStats(),
      twoFactor: {
        enabledUsers: Array.from(
          this.twoFactorService?.twoFactorStore.keys() || []
        ).length,
      },
      backupCodes: {
        usersWithCodes: this.backupCodeService.backupCodeStore.size,
      },
    };
  }
}

/**
 * Export services
 */
module.exports = {
  OTPService,
  TwoFactorAuthService,
  BackupCodeService,
  AdvancedAuthService,
  OTP_CONFIG,
};
