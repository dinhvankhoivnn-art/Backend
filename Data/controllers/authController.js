/**
 * Controller x·ª≠ l√Ω authentication
 * Qu·∫£n l√Ω ƒëƒÉng nh·∫≠p, ƒëƒÉng xu·∫•t v√† x√°c th·ª±c ng∆∞·ªùi d√πng
 */

const User = require("../models/User");
const CreateNewUser = require("../models/CreateNewUser");
const TrackingUserForLogout = require("../models/TrackingUserForLogout");
const { comparePassword, generateToken } = require("../utils/auth");
const { validationResult } = require("express-validator");

/**
 * Controller ƒëƒÉng nh·∫≠p
 * X·ª≠ l√Ω POST /login
 * @param {Object} req - Request object
 * @param {Object} res - Response object
 */
const login = async (req, res) => {
  try {
    // Validate input
    const errors = validationResult(req);
    if (!errors.isEmpty()) {
      return res.status(400).json({
        success: false,
        message: "D·ªØ li·ªáu ƒë·∫ßu v√†o kh√¥ng h·ª£p l·ªá",
        errors: errors.array(),
      });
    }

    const { email, password } = req.body;

    // T√¨m user theo email
    const user = await User.findOne({ email }).select("+pass");
    if (!user) {
      console.warn(`üö´ Login failed - User not found: ${email}`, {
        ip: req.ip,
        userAgent: req.get("User-Agent"),
      });

      return res.status(401).json({
        success: false,
        message: "Email ho·∫∑c m·∫≠t kh·∫©u kh√¥ng ƒë√∫ng",
      });
    }

    // Ki·ªÉm tra m·∫≠t kh·∫©u
    const isPasswordValid = await comparePassword(password, user.pass);
    if (!isPasswordValid) {
      console.warn(`üö´ Login failed - Invalid password: ${email}`, {
        ip: req.ip,
        userAgent: req.get("User-Agent"),
      });

      return res.status(401).json({
        success: false,
        message: "Email ho·∫∑c m·∫≠t kh·∫©u kh√¥ng ƒë√∫ng",
      });
    }

    // T·∫°o JWT token
    const token = user.generateAuthToken();

    // Thi·∫øt l·∫≠p cookie v·ªõi token
    const cookieOptions = {
      httpOnly: true, // Kh√¥ng th·ªÉ truy c·∫≠p t·ª´ JavaScript
      secure: process.env.NODE_ENV === "production", // Ch·ªâ HTTPS trong production
      sameSite: "strict", // NgƒÉn CSRF
      maxAge: 7 * 24 * 60 * 60 * 1000, // 7 ng√†y
    };

    res.cookie("token", token, cookieOptions);

    // Log th√¥ng tin ƒëƒÉng nh·∫≠p th√†nh c√¥ng
    console.log(`‚úÖ Login successful: ${email} (${user.role})`, {
      userId: user._id,
      ip: req.ip,
      userAgent: req.get("User-Agent"),
    });

    // Tr·∫£ v·ªÅ th√¥ng tin user (·∫©n password)
    const userResponse = {
      id: user._id,
      name: user.name,
      email: user.email,
      role: user.role,
      age: user.age,
      address: user.address,
    };

    // L∆∞u th√¥ng tin login tracking
    res.locals.loggedInUser = user;

    return res.status(200).json({
      success: true,
      message: "ƒêƒÉng nh·∫≠p th√†nh c√¥ng",
      data: {
        user: userResponse,
        token: token, // C√≥ th·ªÉ tr·∫£ v·ªÅ token trong response n·∫øu c·∫ßn
      },
    });
  } catch (error) {
    console.error("‚ùå Login error:", error.message);

    return res.status(500).json({
      success: false,
      message: "L·ªói server khi ƒëƒÉng nh·∫≠p",
    });
  }
};

/**
 * Controller hi·ªÉn th·ªã trang login (SSR EJS)
 * X·ª≠ l√Ω GET /login
 * @param {Object} req - Request object
 * @param {Object} res - Response object
 */
const showLoginPage = (req, res) => {
  try {
    // N·∫øu ƒë√£ ƒëƒÉng nh·∫≠p, redirect v·ªÅ dashboard
    if (req.user) {
      return res.redirect("/dashboard");
    }

    // Hi·ªÉn th·ªã trang login v·ªõi EJS
    res.render("login", {
      title: "ƒêƒÉng nh·∫≠p",
      csrfToken: req.csrfToken ? req.csrfToken() : null,
      error: req.query.error,
      success: req.query.success,
    });
  } catch (error) {
    console.error("‚ùå Show login page error:", error.message);

    res.status(500).render("error", {
      title: "L·ªói",
      message: "Kh√¥ng th·ªÉ t·∫£i trang ƒëƒÉng nh·∫≠p",
      error: process.env.NODE_ENV === "development" ? error : null,
    });
  }
};

/**
 * Controller ƒëƒÉng xu·∫•t
 * X·ª≠ l√Ω POST /logout
 * @param {Object} req - Request object
 * @param {Object} res - Response object
 */
const logout = async (req, res) => {
  try {
    if (req.user) {
      const logoutReason = req.body?.reason || "user_initiated";

      // T√¨m b·∫£n ghi login g·∫ßn nh·∫•t ƒë·ªÉ c·∫≠p nh·∫≠t logout
      const lastLoginRecord = await TrackingUserForLogout.findOne({
        userId: req.user.id,
        logoutTime: { $exists: false },
      }).sort({ loginTime: -1 });

      if (lastLoginRecord) {
        const sessionDuration = Math.floor(
          (new Date() - lastLoginRecord.loginTime) / (1000 * 60)
        );

        await TrackingUserForLogout.findByIdAndUpdate(lastLoginRecord._id, {
          logoutTime: new Date(),
          sessionDuration: sessionDuration,
          logoutReason: logoutReason,
          notes: `Logged out at ${new Date().toISOString()}`,
        });
      }

      console.log(`üìù Logout successful: ${req.user.email}`, {
        userId: req.user.id,
        reason: logoutReason,
        ip: req.ip,
      });
    }

    // X√≥a cookie
    res.clearCookie("token");

    // Redirect v·ªÅ trang login ho·∫∑c tr·∫£ v·ªÅ JSON
    if (req.accepts("html")) {
      return res.redirect("/login?success=logout");
    }

    return res.status(200).json({
      success: true,
      message: "ƒêƒÉng xu·∫•t th√†nh c√¥ng",
    });
  } catch (error) {
    console.error("‚ùå Logout error:", error.message);

    // V·∫´n x√≥a cookie ngay c·∫£ khi c√≥ l·ªói
    res.clearCookie("token");

    return res.status(500).json({
      success: false,
      message: "L·ªói server khi ƒëƒÉng xu·∫•t",
    });
  }
};

/**
 * Controller ki·ªÉm tra tr·∫°ng th√°i ƒëƒÉng nh·∫≠p
 * X·ª≠ l√Ω GET /auth/status
 * @param {Object} req - Request object
 * @param {Object} res - Response object
 */
const checkAuthStatus = (req, res) => {
  try {
    if (req.user) {
      return res.status(200).json({
        success: true,
        message: "ƒê√£ ƒëƒÉng nh·∫≠p",
        data: {
          user: {
            id: req.user.id,
            name: req.user.name,
            email: req.user.email,
            role: req.user.role,
            age: req.user.age,
          },
          authenticated: true,
        },
      });
    }

    return res.status(401).json({
      success: false,
      message: "Ch∆∞a ƒëƒÉng nh·∫≠p",
      authenticated: false,
    });
  } catch (error) {
    console.error("‚ùå Check auth status error:", error.message);

    return res.status(500).json({
      success: false,
      message: "L·ªói server khi ki·ªÉm tra tr·∫°ng th√°i ƒëƒÉng nh·∫≠p",
    });
  }
};

/**
 * Controller l√†m m·ªõi token
 * X·ª≠ l√Ω POST /auth/refresh
 * @param {Object} req - Request object
 * @param {Object} res - Response object
 */
const refreshToken = async (req, res) => {
  try {
    if (!req.user) {
      return res.status(401).json({
        success: false,
        message: "Ch∆∞a x√°c th·ª±c",
      });
    }

    // T·∫°o token m·ªõi
    const user = await User.findById(req.user.id);
    if (!user) {
      return res.status(401).json({
        success: false,
        message: "Ng∆∞·ªùi d√πng kh√¥ng t·ªìn t·∫°i",
      });
    }

    const newToken = user.generateAuthToken();

    // C·∫≠p nh·∫≠t cookie
    const cookieOptions = {
      httpOnly: true,
      secure: process.env.NODE_ENV === "production",
      sameSite: "strict",
      maxAge: 7 * 24 * 60 * 60 * 1000,
    };

    res.cookie("token", newToken, cookieOptions);

    console.log(`üîÑ Token refreshed for user: ${user.email}`, {
      userId: user._id,
      ip: req.ip,
    });

    return res.status(200).json({
      success: true,
      message: "Token ƒë√£ ƒë∆∞·ª£c l√†m m·ªõi",
      data: {
        token: newToken,
      },
    });
  } catch (error) {
    console.error("‚ùå Refresh token error:", error.message);

    return res.status(500).json({
      success: false,
      message: "L·ªói server khi l√†m m·ªõi token",
    });
  }
};

/**
 * Controller l·∫•y th√¥ng tin profile
 * X·ª≠ l√Ω GET /auth/profile
 * @param {Object} req - Request object
 * @param {Object} res - Response object
 */
const getProfile = async (req, res) => {
  try {
    if (!req.user) {
      return res.status(401).json({
        success: false,
        message: "Ch∆∞a x√°c th·ª±c",
      });
    }

    const user = await User.findById(req.user.id);
    if (!user) {
      return res.status(404).json({
        success: false,
        message: "Ng∆∞·ªùi d√πng kh√¥ng t·ªìn t·∫°i",
      });
    }

    return res.status(200).json({
      success: true,
      message: "L·∫•y th√¥ng tin profile th√†nh c√¥ng",
      data: {
        user: {
          id: user._id,
          name: user.name,
          email: user.email,
          role: user.role,
          age: user.age,
          address: user.address,
          createdAt: user.createdAt,
          updatedAt: user.updatedAt,
        },
      },
    });
  } catch (error) {
    console.error("‚ùå Get profile error:", error.message);

    return res.status(500).json({
      success: false,
      message: "L·ªói server khi l·∫•y th√¥ng tin profile",
    });
  }
};

module.exports = {
  login,
  showLoginPage,
  logout,
  checkAuthStatus,
  refreshToken,
  getProfile,
};
