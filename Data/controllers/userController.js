/**
 * Controller qu·∫£n l√Ω user
 * X·ª≠ l√Ω CRUD operations cho User model v·ªõi SSR EJS
 */

const User = require("../models/User");
const AccountDelete = require("../models/AccountDelete");
const { validationResult } = require("express-validator");

/**
 * L·∫•y t·∫•t c·∫£ users (SSR EJS)
 * X·ª≠ l√Ω GET /api/v1/user
 * @param {Object} req - Request object
 * @param {Object} res - Response object
 */
const getUserAll = async (req, res) => {
  try {
    let users;
    let title = "Danh s√°ch Users";

    // Ph√¢n quy·ªÅn: admin xem t·∫•t c·∫£, user th∆∞·ªùng ch·ªâ xem ch√≠nh m√¨nh
    if (req.user.role === "admin") {
      users = await User.find({})
        .select("-pass") // ·∫®n password
        .sort({ createdAt: -1 });

      console.log(`üëë Admin viewed all users: ${users.length} users`, {
        adminId: req.user.id,
        ip: req.ip,
      });
    } else {
      // User th∆∞·ªùng ch·ªâ xem th√¥ng tin c·ªßa ch√≠nh m√¨nh
      const user = await User.findById(req.user.id).select("-pass");
      users = user ? [user] : [];
      title = "Th√¥ng tin c√° nh√¢n";

      console.log(`üë§ User viewed own profile: ${req.user.email}`, {
        userId: req.user.id,
        ip: req.ip,
      });
    }

    // Render EJS template
    res.render("users", {
      title: title,
      users: users,
      currentUser: req.user,
      isAdmin: req.user.role === "admin",
      message: req.query.message,
      error: req.query.error,
    });
  } catch (error) {
    console.error("‚ùå Get all users error:", error.message);

    res.status(500).render("error", {
      title: "L·ªói",
      message: "Kh√¥ng th·ªÉ t·∫£i danh s√°ch users",
      error: process.env.NODE_ENV === "development" ? error : null,
    });
  }
};

/**
 * L·∫•y user theo ID (SSR EJS)
 * X·ª≠ l√Ω GET /api/v1/user/:id
 * @param {Object} req - Request object
 * @param {Object} res - Response object
 */
const getUserForID = async (req, res) => {
  try {
    const { id } = req.params;

    // Validate ID
    const errors = validationResult(req);
    if (!errors.isEmpty()) {
      return res.status(400).render("error", {
        title: "L·ªói",
        message: "ID kh√¥ng h·ª£p l·ªá",
        errors: errors.array(),
      });
    }

    const user = await User.findById(id).select("-pass");
    if (!user) {
      return res.status(404).render("error", {
        title: "Kh√¥ng t√¨m th·∫•y",
        message: "User kh√¥ng t·ªìn t·∫°i",
      });
    }

    // Ki·ªÉm tra quy·ªÅn: admin ho·∫∑c ch√≠nh user ƒë√≥
    if (req.user.role !== "admin" && req.user.id !== id) {
      return res.status(403).render("error", {
        title: "Kh√¥ng c√≥ quy·ªÅn",
        message: "B·∫°n kh√¥ng c√≥ quy·ªÅn xem th√¥ng tin c·ªßa user kh√°c",
      });
    }

    console.log(`üëÄ User viewed profile: ${user.email}`, {
      viewerId: req.user.id,
      targetId: id,
      ip: req.ip,
    });

    // Render trang chi ti·∫øt user
    res.render("userDetail", {
      title: `Th√¥ng tin ${user.name}`,
      user: user,
      currentUser: req.user,
      isOwner: req.user.id === id,
      isAdmin: req.user.role === "admin",
    });
  } catch (error) {
    console.error("‚ùå Get user by ID error:", error.message);

    res.status(500).render("error", {
      title: "L·ªói",
      message: "Kh√¥ng th·ªÉ t·∫£i th√¥ng tin user",
      error: process.env.NODE_ENV === "development" ? error : null,
    });
  }
};

/**
 * Hi·ªÉn th·ªã form t·∫°o user m·ªõi (SSR EJS)
 * X·ª≠ l√Ω GET /api/v1/user/new
 * @param {Object} req - Request object
 * @param {Object} res - Response object
 */
const showCreateUserForm = (req, res) => {
  try {
    // Ch·ªâ admin m·ªõi ƒë∆∞·ª£c t·∫°o user
    if (req.user.role !== "admin") {
      return res.status(403).render("error", {
        title: "Kh√¥ng c√≥ quy·ªÅn",
        message: "Ch·ªâ admin m·ªõi c√≥ th·ªÉ t·∫°o user m·ªõi",
      });
    }

    res.render("createUser", {
      title: "T·∫°o User m·ªõi",
      currentUser: req.user,
      csrfToken: req.csrfToken ? req.csrfToken() : null,
      errors: null,
      formData: null,
    });
  } catch (error) {
    console.error("‚ùå Show create user form error:", error.message);

    res.status(500).render("error", {
      title: "L·ªói",
      message: "Kh√¥ng th·ªÉ t·∫£i form t·∫°o user",
      error: process.env.NODE_ENV === "development" ? error : null,
    });
  }
};

/**
 * T·∫°o user m·ªõi (SSR EJS)
 * X·ª≠ l√Ω POST /api/v1/user
 * @param {Object} req - Request object
 * @param {Object} res - Response object
 */
const createUserNew = async (req, res) => {
  try {
    // Validate input
    const errors = validationResult(req);
    if (!errors.isEmpty()) {
      return res.status(400).render("createUser", {
        title: "T·∫°o User m·ªõi",
        currentUser: req.user,
        csrfToken: req.csrfToken ? req.csrfToken() : null,
        errors: errors.array(),
        formData: req.body,
      });
    }

    // Ch·ªâ admin m·ªõi ƒë∆∞·ª£c t·∫°o user
    if (req.user.role !== "admin") {
      return res.status(403).render("error", {
        title: "Kh√¥ng c√≥ quy·ªÅn",
        message: "Ch·ªâ admin m·ªõi c√≥ th·ªÉ t·∫°o user m·ªõi",
      });
    }

    const { name, age, address, email, pass, role } = req.body;

    // Ki·ªÉm tra email ƒë√£ t·ªìn t·∫°i
    const existingUser = await User.findOne({ email });
    if (existingUser) {
      return res.status(400).render("createUser", {
        title: "T·∫°o User m·ªõi",
        currentUser: req.user,
        csrfToken: req.csrfToken ? req.csrfToken() : null,
        errors: [{ msg: "Email ƒë√£ ƒë∆∞·ª£c s·ª≠ d·ª•ng" }],
        formData: req.body,
      });
    }

    // T·∫°o user m·ªõi
    const newUser = new User({
      name,
      age: parseInt(age),
      address,
      email,
      pass, // S·∫Ω ƒë∆∞·ª£c hash t·ª± ƒë·ªông b·ªüi pre-save middleware
      role: role || "user",
    });

    await newUser.save();

    console.log(`‚úÖ User created by admin: ${newUser.email}`, {
      adminId: req.user.id,
      newUserId: newUser._id,
      ip: req.ip,
    });

    // Redirect v·ªÅ danh s√°ch users v·ªõi th√¥ng b√°o th√†nh c√¥ng
    res.redirect("/api/v1/user?message=User ƒë√£ ƒë∆∞·ª£c t·∫°o th√†nh c√¥ng");
  } catch (error) {
    console.error("‚ùå Create user error:", error.message);

    res.status(500).render("createUser", {
      title: "T·∫°o User m·ªõi",
      currentUser: req.user,
      csrfToken: req.csrfToken ? req.csrfToken() : null,
      errors: [{ msg: "L·ªói server khi t·∫°o user" }],
      formData: req.body,
    });
  }
};

/**
 * Hi·ªÉn th·ªã form ch·ªânh s·ª≠a user (SSR EJS)
 * X·ª≠ l√Ω GET /api/v1/user/:id/edit
 * @param {Object} req - Request object
 * @param {Object} res - Response object
 */
const showEditUserForm = async (req, res) => {
  try {
    const { id } = req.params;

    const user = await User.findById(id).select("-pass");
    if (!user) {
      return res.status(404).render("error", {
        title: "Kh√¥ng t√¨m th·∫•y",
        message: "User kh√¥ng t·ªìn t·∫°i",
      });
    }

    // Ki·ªÉm tra quy·ªÅn: admin ho·∫∑c ch√≠nh user ƒë√≥
    if (req.user.role !== "admin" && req.user.id !== id) {
      return res.status(403).render("error", {
        title: "Kh√¥ng c√≥ quy·ªÅn",
        message: "B·∫°n kh√¥ng c√≥ quy·ªÅn ch·ªânh s·ª≠a user n√†y",
      });
    }

    res.render("editUser", {
      title: `Ch·ªânh s·ª≠a ${user.name}`,
      user: user,
      currentUser: req.user,
      csrfToken: req.csrfToken ? req.csrfToken() : null,
      errors: null,
    });
  } catch (error) {
    console.error("‚ùå Show edit user form error:", error.message);

    res.status(500).render("error", {
      title: "L·ªói",
      message: "Kh√¥ng th·ªÉ t·∫£i form ch·ªânh s·ª≠a user",
      error: process.env.NODE_ENV === "development" ? error : null,
    });
  }
};

/**
 * C·∫≠p nh·∫≠t user theo ID (SSR EJS)
 * X·ª≠ l√Ω PUT /api/v1/user/:id
 * @param {Object} req - Request object
 * @param {Object} res - Response object
 */
const updateForID = async (req, res) => {
  try {
    const { id } = req.params;

    // Validate input
    const errors = validationResult(req);
    if (!errors.isEmpty()) {
      const user = await User.findById(id).select("-pass");
      return res.status(400).render("editUser", {
        title: `Ch·ªânh s·ª≠a ${user?.name || "User"}`,
        user: user,
        currentUser: req.user,
        csrfToken: req.csrfToken ? req.csrfToken() : null,
        errors: errors.array(),
      });
    }

    const user = await User.findById(id);
    if (!user) {
      return res.status(404).render("error", {
        title: "Kh√¥ng t√¨m th·∫•y",
        message: "User kh√¥ng t·ªìn t·∫°i",
      });
    }

    // Ki·ªÉm tra quy·ªÅn: admin ho·∫∑c ch√≠nh user ƒë√≥
    if (req.user.role !== "admin" && req.user.id !== id) {
      return res.status(403).render("error", {
        title: "Kh√¥ng c√≥ quy·ªÅn",
        message: "B·∫°n kh√¥ng c√≥ quy·ªÅn ch·ªânh s·ª≠a user n√†y",
      });
    }

    const { name, age, address, email, role } = req.body;

    // Ki·ªÉm tra email tr√πng l·∫∑p (n·∫øu thay ƒë·ªïi email)
    if (email !== user.email) {
      const existingUser = await User.findOne({ email });
      if (existingUser) {
        return res.status(400).render("editUser", {
          title: `Ch·ªânh s·ª≠a ${user.name}`,
          user: user,
          currentUser: req.user,
          csrfToken: req.csrfToken ? req.csrfToken() : null,
          errors: [{ msg: "Email ƒë√£ ƒë∆∞·ª£c s·ª≠ d·ª•ng" }],
        });
      }
    }

    // C·∫≠p nh·∫≠t user
    const updateData = { name, age: parseInt(age), address, email };

    // Ch·ªâ admin m·ªõi ƒë∆∞·ª£c thay ƒë·ªïi role
    if (req.user.role === "admin" && role) {
      updateData.role = role;
    }

    await User.findByIdAndUpdate(id, updateData, { new: true });

    console.log(`‚úèÔ∏è User updated: ${user.email}`, {
      updaterId: req.user.id,
      updatedId: id,
      changes: Object.keys(updateData),
      ip: req.ip,
    });

    // Redirect v·ªõi th√¥ng b√°o th√†nh c√¥ng
    const redirectUrl =
      req.user.role === "admin" ? "/api/v1/user" : `/api/v1/user/${id}`;
    res.redirect(`${redirectUrl}?message=User ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t th√†nh c√¥ng`);
  } catch (error) {
    console.error("‚ùå Update user error:", error.message);

    res.status(500).render("error", {
      title: "L·ªói",
      message: "Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t user",
      error: process.env.NODE_ENV === "development" ? error : null,
    });
  }
};

/**
 * X√≥a user theo ID (SSR EJS)
 * X·ª≠ l√Ω DELETE /api/v1/user/:id
 * @param {Object} req - Request object
 * @param {Object} res - Response object
 */
const deleteForID = async (req, res) => {
  try {
    const { id } = req.params;

    // Ch·ªâ admin m·ªõi ƒë∆∞·ª£c x√≥a user
    if (req.user.role !== "admin") {
      return res.status(403).render("error", {
        title: "Kh√¥ng c√≥ quy·ªÅn",
        message: "Ch·ªâ admin m·ªõi c√≥ th·ªÉ x√≥a user",
      });
    }

    const user = await User.findById(id);
    if (!user) {
      return res.status(404).render("error", {
        title: "Kh√¥ng t√¨m th·∫•y",
        message: "User kh√¥ng t·ªìn t·∫°i",
      });
    }

    // Kh√¥ng cho ph√©p x√≥a admin cu·ªëi c√πng
    if (user.role === "admin") {
      const adminCount = await User.countDocuments({ role: "admin" });
      if (adminCount <= 1) {
        return res.status(400).render("error", {
          title: "Kh√¥ng th·ªÉ x√≥a",
          message: "Kh√¥ng th·ªÉ x√≥a admin cu·ªëi c√πng",
        });
      }
    }

    // L∆∞u th√¥ng tin v√†o AccountDelete tr∆∞·ªõc khi x√≥a
    await AccountDelete.create({
      originalUserId: user._id,
      name: user.name,
      age: user.age,
      address: user.address,
      email: user.email,
      role: user.role,
      deleteReason: req.body?.reason || "admin_action",
      deleteNote: req.body?.note || "Deleted by admin",
      deletedBy: req.user.id,
      deletedByIP: req.ip,
    });

    // X√≥a user
    await User.findByIdAndDelete(id);

    console.log(`üóëÔ∏è User deleted: ${user.email}`, {
      adminId: req.user.id,
      deletedId: id,
      reason: req.body?.reason || "admin_action",
      ip: req.ip,
    });

    // Redirect v·ªÅ danh s√°ch users
    res.redirect("/api/v1/user?message=User ƒë√£ ƒë∆∞·ª£c x√≥a th√†nh c√¥ng");
  } catch (error) {
    console.error("‚ùå Delete user error:", error.message);

    res.status(500).render("error", {
      title: "L·ªói",
      message: "Kh√¥ng th·ªÉ x√≥a user",
      error: process.env.NODE_ENV === "development" ? error : null,
    });
  }
};

module.exports = {
  getUserAll,
  getUserForID,
  showCreateUserForm,
  createUserNew,
  showEditUserForm,
  updateForID,
  deleteForID,
};
